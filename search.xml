<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Obsidian插件——Markdown Prettifier</title>
      <link href="/posts/386e7395/"/>
      <url>/posts/386e7395/</url>
      
        <content type="html"><![CDATA[<h2 id="Markdown-Prettifier"><a href="#Markdown-Prettifier" class="headerlink" title="Markdown Prettifier"></a>Markdown Prettifier</h2><blockquote><ul><li>简介：美化Markdown格式并添加修改日期到Front matter</li><li>更新：2021-09-15</li><li>版本：0.08</li><li>安装方式：Obsidian 内第三方插件</li><li>Github：<a href="https://github.com/cristianvasquez/obsidian-prettify">https://github.com/cristianvasquez/obsidian-prettify</a></li></ul></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>每个人使用 Markdown 的习惯不同，例如无序列表可使用<code>* 项目</code>、<code>+ 项目</code>或者<code>- 项目</code>；加粗文本可使用<code>*加粗文本*</code>或<code>_加粗文本_</code>，这种对于有强迫症的人就是一个灾难。Markdown Prettifier 可以将这些格式统一起来，让阅读 Markdown 文件时更舒适。</p><p>另外最值得推荐的是新增&#x2F;更新 <a href="https://publish.obsidian.md/help-zh/%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/YAML+front+matter">Front matter</a>，设置好快捷键，方便在编辑了笔记后新增&#x2F;更新日期到Front matter。</p><h2 id="中文翻译"><a href="#中文翻译" class="headerlink" title="中文翻译"></a>中文翻译</h2><blockquote><p>结合自己理解的机翻。如有疑问请留言</p></blockquote><p>安装好社区插件原版后，下载压缩包解压后覆盖 Obsidian 库内的<code>.obsidian/plugins/</code>内对应文件</p><p><a href="https://github.com/mlosun/cdn.mlosun.com/raw/main/files/markdown-prettifier.zip">汉化版Markdown Prettifier下载</a></p><h2 id="我的应用"><a href="#我的应用" class="headerlink" title="我的应用"></a>我的应用</h2><ul><li>Front matter 模版设置为<code>update: &#123;&#123;date:YYYY/MM/DD&#125;&#125;</code>（使用<code>YYYY-MM-DD</code>会出现莫名bug，<a href="https://forum-zh.obsidian.md/t/topic/389">来源</a>）</li><li>快捷键设置为<code>Command+S</code><ul><li>替换原有的保存当前文件<code>Command+S</code>快捷键</li><li>多年伏案工作早已养成了随时<code>Command+S</code>的好习惯</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Obsidian </tag>
            
            <tag> 插件 </tag>
            
            <tag> Markdown Prettifier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian资源搜集</title>
      <link href="/posts/ec653355/"/>
      <url>/posts/ec653355/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在尝试了非常多的笔记软件后，最终还是决定使用 Obsidian 作为自己的长期笔记系统。</p></blockquote><h2 id="官方资源"><a href="#官方资源" class="headerlink" title="官方资源"></a>官方资源</h2><ul><li>官网：<a href="https://obsidian.md/">https://obsidian.md</a></li><li>论坛：<a href="https://forum.obsidian.md/">https://forum.obsidian.md</a></li><li>中文论坛：<a href="https://forum-zh.obsidian.md/">https://forum-zh.obsidian.md</a></li><li>Discord：<a href="https://discord.gg/veuWUTm">https://discord.gg/veuWUTm</a>（内有中文频道）<h2 id="第三方资源"><a href="#第三方资源" class="headerlink" title="第三方资源"></a>第三方资源</h2></li><li>bilibili<ul><li><a href="https://space.bilibili.com/432408734/channel/seriesdetail?sid=299464">Johnny学OB（黑曜石笔记）</a> by Johnny学</li><li><a href="https://space.bilibili.com/241033241/channel/seriesdetail?sid=285962">原创Obsidian</a> by 八角经刀</li><li><a href="https://space.bilibili.com/39954354/channel/seriesdetail?sid=258294">Obsdian 完全指南</a> by 胸毛齐腰</li><li><a href="https://space.bilibili.com/452736484/search/video?keyword=obsidian">Obsidian 相关视频</a> by Struggle_with_me</li><li><a href="https://space.bilibili.com/32074632/search/video?keyword=obsidian">Obsidian 相关视频</a> by 快客_蚕子</li><li><a href="https://space.bilibili.com/628098275/search/video?keyword=obsidian">Obsidian 相关视频</a> by 即凉</li><li><a href="https://space.bilibili.com/39477772/search/video?keyword=obsidian">Obsidian 相关视频</a> by aliya成长记</li></ul></li><li>YouTube<ul><li><a href="https://www.youtube.com/playlist?list=PLWg9zacwOnwfcpVm5pAKgOHms7PntsgJS">Obsidian.md与笔记系统</a> by 簡睿軟體頻道</li><li><a href="https://www.youtube.com/playlist?list=PLAXVfXtWydoqF19x_ta6r1C2QOVj9D-m9">Obsidian 黑曜石软件教学</a> by 方俊皓</li></ul></li><li>知乎<ul><li><a href="https://www.zhihu.com/column/c_1413472005866266624">玩转Obsidian的保姆级教程</a> by Wyatt</li><li><a href="https://www.zhihu.com/column/c_1302994040707948544">obsidian 软件技巧</a> by AllinBon</li><li><a href="https://www.zhihu.com/column/c_1359618626954285056">Obsidian实战随笔</a> by 天道</li><li><a href="https://www.zhihu.com/column/c_1408784036097220608">Obsidian—知识库搭建指南</a> by GotBook</li><li><a href="https://www.zhihu.com/column/c_1419985761059520513">Obsidian笔记本</a> by LillianWho</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Obsidian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Hexo &amp; Github Actions 搭建博客</title>
      <link href="/posts/29b33eae/"/>
      <url>/posts/29b33eae/</url>
      
        <content type="html"><![CDATA[<h2 id="方案概述"><a href="#方案概述" class="headerlink" title="方案概述"></a>方案概述</h2><p>一直认为在 Github 上搭建静态博客是一件很省<del>钱</del>心的事情，不需要去操心服务器到期、各种配置，并且 Github 也已经到了大而不倒（至少很难）的地步了吧。试过不少静态博客方案，也看过不少 Github Actions 的教程，最终结合自己的思路整理出来一套超简单的 Hexo &amp; Github Actions 搭建博客方案。</p><h3 id="提供两种方案"><a href="#提供两种方案" class="headerlink" title="提供两种方案"></a>提供两种方案</h3><ul><li>单库方案：Hexo源文件和生成的静态文件在同一个 Github 仓库中管理，便于管理维护</li><li>双库方案：Hexo源文件存放在私有仓库中，生成的静态文件存放在公有仓库中，便于保护隐私</li></ul><h3 id="步骤简述如下"><a href="#步骤简述如下" class="headerlink" title="步骤简述如下"></a>步骤简述如下</h3><ol><li>设置 Github 仓库 &amp; 添加 SSH key</li><li>本地搭建 Hexo博客</li><li>本地配置 Hexo部署</li><li>本地配置 Github Actions</li><li>部署到 Github 仓库</li><li>设置 Github Pages</li></ol><h3 id="详细步骤中替换内容"><a href="#详细步骤中替换内容" class="headerlink" title="详细步骤中替换内容"></a>详细步骤中替换内容</h3><blockquote><ul><li><code>mlosun</code>——Github 用户名</li><li><code>HexoBlog</code>——单库方案中的 Github 仓库</li><li><code>HexoBlogPublic</code>——双库方案中的 Github <strong>公有</strong>仓库</li><li><code>HexoBlogPrivate</code>——双库方案中的 Github <strong>私有</strong>仓库</li></ul></blockquote><h2 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h2><p>在安装Hexo之前，需要先安装依赖程序 <a href="http://nodejs.org/">Node.js</a> &amp; <a href="http://git-scm.com/">Git</a>，在官网上下载最新版本安装即可。</p><p>随后只需要打开终端，使用npm命令一键安装Hexo即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="单库方案"><a href="#单库方案" class="headerlink" title="单库方案"></a>单库方案</h3><h4 id="Step-1-Github-设置"><a href="#Step-1-Github-设置" class="headerlink" title="Step.1 Github 设置"></a>Step.1 Github 设置</h4><p>登录<a href="https://github.com/">Github</a>，创建一个新的项目仓库（例如：<code>https://github.com/mlosun/HexoBlog.git</code>）。</p><p>随后在终端使用命令 <code>ssh-keygen -t rsa -C &quot;mlosun&quot;</code>创建新的 SSH key 一对公钥私钥，创建后可以在<code>~/.ssh</code>目录下找到它们，带有<code>.pub</code>的是公钥，另一个是私钥。</p><ul><li>在 Github 上的 Settings - SSH and GPG keys 中，创建一个新的 SSH key ，名称随意，将<strong>公钥</strong>内容复制进去</li><li>在当前项目仓库的 Settings - Secrets 中，创建一个新的 secret ，命名为<code>ACCESS_TOKEN</code>，<strong>私钥</strong>内容复制进去</li></ul><h4 id="Step-2-搭建博客"><a href="#Step-2-搭建博客" class="headerlink" title="Step.2 搭建博客"></a>Step.2 搭建博客</h4><p>回到本地，在你的工作目录新建存放 Hexo 文件的文件夹，进入该文件夹并初始化 Hexo 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init HexoBlog</span><br><span class="line">cd HexoBlog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="Step-3-配置Hexo部署"><a href="#Step-3-配置Hexo部署" class="headerlink" title="Step.3 配置Hexo部署"></a>Step.3 配置Hexo部署</h4><p>打开 HexoBlog 目录下的配置文件 <code>_config.yml</code>，配置deploy部分的内容如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line"> type: git  </span><br><span class="line"> repo: https://github.com/mlosun/HexoBlog.git # 你的 Github 仓库地址  </span><br><span class="line"> branch: source</span><br></pre></td></tr></table></figure><h4 id="Step-4-配置-Github-Actions"><a href="#Step-4-配置-Github-Actions" class="headerlink" title="Step.4 配置 Github Actions"></a>Step.4 配置 Github Actions</h4><p>在 HexoBlog 目录下新建文件夹<code>.github/workflows</code>（隐藏文件夹），新建文件<code>deploy.yml</code>，内容如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">name: Hexo Blog CI &amp; CD</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - source  # 存放 Hexo 源文件的分支</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  pages:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v2</span><br><span class="line">      - name: Use Node.js 12.x</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: &#x27;12.x&#x27;</span><br><span class="line">      - name: Cache NPM dependencies</span><br><span class="line">        uses: actions/cache@v2</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="line">      - name: Install Dependencies</span><br><span class="line">        run: npm install</span><br><span class="line">      - name: Build</span><br><span class="line">        run: npm run build</span><br><span class="line">      - name: Deploy</span><br><span class="line">        uses: peaceiris/actions-gh-pages@v3</span><br><span class="line">        with:</span><br><span class="line">          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; # 无需修改</span><br><span class="line">          deploy_key: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;  # 添加 ACCESS_TOKEN</span><br><span class="line">          publish_dir: ./public  # hexo generate 生成的博客文件默认存放在 /public 目录下</span><br><span class="line">          publish_branch: main  # 存放展示的博客文件的分支</span><br></pre></td></tr></table></figure><h4 id="Step-5-部署到-Github-Repositories"><a href="#Step-5-部署到-Github-Repositories" class="headerlink" title="Step.5 部署到 Github Repositories"></a>Step.5 部署到 Github Repositories</h4><p>终端切换到 HexoBlog 目录下，依次执行以下命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init  # 初始化git</span><br><span class="line">git add .  # 添加全部文件到暂存区</span><br><span class="line">git commit -m &quot;first commit&quot;  # 提交暂存区文件</span><br><span class="line">git branch -M source  # 分支重命名为 source</span><br><span class="line">git remote add origin https://github.com/mlosun/HexoBlog.git  # 连接远端仓库</span><br><span class="line">git push -u origin source  # 推送到远端仓库</span><br></pre></td></tr></table></figure><h4 id="Step-6-配置-Github-Pages"><a href="#Step-6-配置-Github-Pages" class="headerlink" title="Step.6 配置 Github Pages"></a>Step.6 配置 Github Pages</h4><p>回到 Github 仓库中，在 Settings - Pages 中，选择<code>main</code>分支</p><blockquote><p>若要绑定自有域名，需要创建 <code>HexoBlog/source/CNAME</code>文件，内容填写域名即可。在 Settings - Pages 中绑定的域名在下一次自动部署后会被覆盖。</p></blockquote><p>到此，查看 Github 的仓库，已经有了两个分支<code>main</code> 和 <code>source</code>，并且后续在<code>source</code>分支做的更新都会自动部署到<code>main</code> 分支内。而<code>main</code> 则通过 Github Pages 服务展示你的博客。</p><h3 id="双库方案"><a href="#双库方案" class="headerlink" title="双库方案"></a>双库方案</h3><h4 id="Step-1-Github-设置-1"><a href="#Step-1-Github-设置-1" class="headerlink" title="Step.1 Github 设置"></a>Step.1 Github 设置</h4><p>登录<a href="https://github.com/">Github</a>，创建两个新的项目仓库，例如：</p><ul><li>公有仓库：<code>https://github.com/mlosun/HexoBlogPublic.git</code></li><li>私有仓库：<code>https://github.com/mlosun/HexoBlogPrivate.git</code></li></ul><p>随后在终端使用命令 <code>ssh-keygen -t rsa -C &quot;mlosun&quot;</code>创建新的 SSH key 一对公钥私钥，创建后可以在<code>~/.ssh</code>目录下找到它们，带有<code>.pub</code>的是公钥，另一个是私钥。</p><ul><li>在<code>HexoBlogPublic</code>仓库的 Settings - Deploy keys 中，创建一个新的 deploy key ，名称随意，将<strong>公钥</strong>内容复制进去，记得勾选<strong>Allow write access</strong></li><li>在<code>HexoBlogPrivate</code>仓库的 Settings - Secrets 中，创建一个新的 secret ，命名为<code>ACCESS_TOKEN</code>，<strong>私钥</strong>内容复制进去</li></ul><h4 id="Step-2-搭建博客-1"><a href="#Step-2-搭建博客-1" class="headerlink" title="Step.2 搭建博客"></a>Step.2 搭建博客</h4><p>回到本地，在你的工作目录新建存放 Hexo 文件的文件夹，进入该文件夹并初始化 Hexo 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init HexoBlog</span><br><span class="line">cd HexoBlog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="Step-3-配置Hexo部署-1"><a href="#Step-3-配置Hexo部署-1" class="headerlink" title="Step.3 配置Hexo部署"></a>Step.3 配置Hexo部署</h4><p>打开 HexoBlog 目录下的配置文件 <code>_config.yml</code>，配置deploy部分的内容如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:  </span><br><span class="line"> type: git  </span><br><span class="line"> repo: https://github.com/mlosun/HexoBlogPrivate.git # 你的私有 Github 仓库地址  </span><br><span class="line"> branch: source</span><br></pre></td></tr></table></figure><h4 id="Step-4-配置-Github-Actions-1"><a href="#Step-4-配置-Github-Actions-1" class="headerlink" title="Step.4 配置 Github Actions"></a>Step.4 配置 Github Actions</h4><p>在 HexoBlog 目录下新建文件夹<code>.github/workflows</code>（隐藏文件夹），新建文件<code>deploy.yml</code>，内容如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">name: Hexo Blog CI &amp; CD</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - source  # 存放 Hexo 源文件的分支</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  pages:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v2</span><br><span class="line">      - name: Use Node.js 12.x</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: &#x27;12.x&#x27;</span><br><span class="line">      - name: Cache NPM dependencies</span><br><span class="line">        uses: actions/cache@v2</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.OS &#125;&#125;-npm-cache</span><br><span class="line">      - name: Install Dependencies</span><br><span class="line">        run: npm install</span><br><span class="line">      - name: Build</span><br><span class="line">        run: npm run build</span><br><span class="line">      - name: Deploy</span><br><span class="line">        uses: peaceiris/actions-gh-pages@v3</span><br><span class="line">        with:</span><br><span class="line">          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; # 无需修改</span><br><span class="line">          deploy_key: $&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;  # 添加 ACCESS_TOKEN</span><br><span class="line">          publish_dir: ./public  # hexo generate 生成的博客文件默认存放在 /public 目录下</span><br><span class="line">          publish_branch: main  # 存放展示的博客文件的分支</span><br><span class="line">          external_repository: mlosun/HexoBlogPublic  # 文件发布到公有仓库，记得改为自己的地址</span><br></pre></td></tr></table></figure><h4 id="Step-5-部署到-Github-Repositories-1"><a href="#Step-5-部署到-Github-Repositories-1" class="headerlink" title="Step.5 部署到 Github Repositories"></a>Step.5 部署到 Github Repositories</h4><p>终端切换到 HexoBlog 目录下，依次执行以下命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init  # 初始化git</span><br><span class="line">git add .  # 添加全部文件到暂存区</span><br><span class="line">git commit -m &quot;first commit&quot;  # 提交暂存区文件</span><br><span class="line">git branch -M source  # 分支重命名为 source</span><br><span class="line">git remote add origin https://github.com/mlosun/HexoBlogPrivate.git  # 连接远端仓库</span><br><span class="line">git push -u origin source  # 推送到远端仓库</span><br></pre></td></tr></table></figure><h4 id="Step-6-配置-Github-Pages-1"><a href="#Step-6-配置-Github-Pages-1" class="headerlink" title="Step.6 配置 Github Pages"></a>Step.6 配置 Github Pages</h4><p>回到 Github 仓库中，在公有仓库<code>HexoBlogPublic</code>的 Settings - Pages 中，选择<code>main</code>分支</p><blockquote><p>若要绑定自有域名，需要在私有仓库中创建 <code>HexoBlogPrivate/source/CNAME</code>文件，内容填写域名即可。在 Settings - Pages 中绑定的域名在下一次自动部署后会被覆盖。</p></blockquote><p>到此，查看 Github 的仓库：</p><ul><li>公有仓库：<code>HexoBlogPublic</code> 内分支<code>main</code>，通过 Github Pages 服务展示你的博客。</li><li>私有仓库：<code>HexoBlogPrivate</code> 内分支<code>source</code>，发生更新后会自动部署到公有仓库内。</li></ul><h2 id="日常更新"><a href="#日常更新" class="headerlink" title="日常更新"></a>日常更新</h2><h3 id="简单更新"><a href="#简单更新" class="headerlink" title="简单更新"></a>简单更新</h3><p>可以直接在对应 Github 的仓库中编辑 <code>source</code>分支，保存提交后Github Actions 会自动部署。</p><h3 id="复杂更新"><a href="#复杂更新" class="headerlink" title="复杂更新"></a>复杂更新</h3><p>为了减少一些莫名其妙的事情发生，建议每次在进行复杂一些的更新时，删除掉本地的仓库文件，从 Github 上重新 clone 仓库到本地：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mlosun/HexoBlog.git </span><br><span class="line">git checkout source# 切换到 source 分支</span><br><span class="line"># 双库是`https://github.com/mlosun/HexoBlogPrivate.git`</span><br></pre></td></tr></table></figure><p>更新时可以在本地使用Hexo服务器进行预览：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d# 生成静态文件</span><br><span class="line">hexo s# 启动Hexo服务器，默认预览地址http://localhost:4000</span><br></pre></td></tr></table></figure><p>更新后推送到 Github 仓库时，建议清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean# 清除缓存</span><br><span class="line">git add .  # 添加全部文件到暂存区</span><br><span class="line">git commit -m &quot;update&quot;  # 提交暂存区文件</span><br><span class="line">git push -u origin source  # 推送到远端仓库</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.towind.fun/2019/12/26/hello-hexo-world/">Hello Hexo World</a></li><li><a href="https://blog.towind.fun/2021/02/18/hexo-github-actions-ci-cd/">使用 Github Actions 持续集成与部署 Hexo 博客</a></li><li><a href="https://github.com/marketplace/actions/github-pages-action">GitHub Pages action</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github Actions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入坑NAS，喜提威联通TS-453Dmini</title>
      <link href="/posts/8676285f/"/>
      <url>/posts/8676285f/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2020&#x2F;12&#x2F;25 update：在把玩了几天威联通后，QNAP的系统对我还是有些复杂，实在无暇去折腾，考虑再三后决定闲鱼转出。后于双12当天入手群晖DS220+，2盘位对我来说初期也足够用了。体验了群晖的DSM系统后感觉真香！同时购入少数派以群晖为基础的<a href="https://sspai.com/series/182">《家用NAS入门指南》</a>。</p></blockquote><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>种草NAS已经很久了，最大的需求莫过于历史多年照片的存储，以前还能定期的通过文件夹按月去归档整理一下，但直到去年娃出生后，这个照片量就越来越多，也没有足够的时间去整理。虽然和我老婆各自都买了iCloud的空间，但平时访问慢不说，比如同样的场景下我和老婆都会给娃拍不同视角的照片，再加上爷爷奶奶、外公外婆的手机，总是设置共享相册也是非常的麻烦。</p><p>原本计划把照片整体迁移到Google Photo上，虽然速度慢，但贵在免费啊。可近期Google Photo的新政策彻底断了这个思路。顺便回味一下Google Reader、百度网盘等这些大厂服务的可靠性，觉得数据还是掌握在自己手中会安心。</p><p>至于如果用云服务器来解决这些需求的话，一是贵，二是速度也无法得到满足，三是也一直没找到合适的应用来解决自己这些乱七八糟的需求（特别是人脸识别照片）。</p><p>近期在知乎和张大妈上看了不少NAS的内容，盘了盘自己的需求，列出以下几需求（以及现有云服务解决不彻底的需求）</p><ul><li>iCloud空间不足，Mac的时光机器和iPhone备份没有空间（除非和老婆都升级¥21&#x2F;月&#x2F;200G，算下来年¥504，估计最多1年就会爆掉）</li><li>不同设备间文件同步（虽说国产坚果云很良心，但每月1G的上传空间还是不够用，专业版¥200&#x2F;年且空间仍然有限）</li><li>能够智能&amp;人工分类照片存储方案（国内厂商不敢用，国外厂商慢且贵，还要考虑未来迁移是否方便的问题，移动硬盘也不方便）</li><li>及时的搜集六个家长的宝宝照片（这个除非愿意忍受随时找大家要一遍，且要教会老人们什么叫发原图，也要忍受手动下载原图、另存为等一些列麻烦事…不然真的没有解决方案）</li><li>家庭影音中心（这个是个新需求，虽然现在有小米盒子&#x2F;华为盒子&#x2F;华数，但耐不住免费资源少，动不动就要收费）</li><li>离线下载（这个也是新需求，结合上面一起的）</li><li>统一Email、Rss、视频、电子书、素材等存储</li></ul><p>以上需求，就算通过网络服务能够找齐全，价格抛开不谈，光管理这些账户，就够麻烦的了。索性一步到位，直接上NAS算了！</p><h2 id="选购"><a href="#选购" class="headerlink" title="选购"></a>选购</h2><p>看了不少选购指南，基本上的调性就是群晖体验更人性化，威联通性价比更高。锁定了群晖、威联通、铁威马、黑群晖四种方案。考虑了下自己的渣技术，Pass掉黑群晖；看了看自己的空钱包，Pass掉群晖；又因为铁威马毕竟用户太少，估计遇到问题很难搜索到解决方案。毕竟自己触网十余年，威联通就算再不人性化，总归还是能搞定的吧？在线体验了下威联通的<a href="https://www.qnap.com/zh-cn/live-demo">Live Demo</a>，觉得还可以接受。</p><p>选定了品牌，再看看盘位，因为首次使用且目前数据量也并不大，所以2盘位或4盘位基本能解决需求了。都说TS-453Bmini是威联通家的爆款，市场均价¥2000左右，可找了一圈居然没找到卖的。了解了一下原来已经全面升级为<a href="https://www.qnap.com.cn/zh-cn/product/ts-453dmini">TS-453Dmini</a>了。</p><p>在张大妈家<a href="https://www.smzdm.com/p/27565264/">找到TVS-951N的优惠</a>，好像9盘位很厉害啊，且只比TS-453Dmini贵了¥100，纠结了很久，从图省事的角度还是选择了<a href="https://item.jd.com/100016702340.html">TS-453Dmini（含2块酷狼4T硬盘）的套装</a>，总价¥4899。</p><p>下单后其实也有些小后悔，也许自己的需求2盘位其实也能搞定，但看了TS-453Dmini的配置，除了自己的需求外，未来也能有更多的玩法，就算了不再纠结了。</p><p>至于硬盘，就先用套装里的两块4T，后续需求达到了再进行扩充即可，这个也先不纠结。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151759791.jpeg"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>12月1日下午2点下单，12月2日上午10点拿到。京东物流还是一如既往的快。</p><p>12月2日晚上回家装好系统后发现还是太多东西不会配置，看来这个东西还是需要再折腾折腾。那就先折腾一段时间再说把，或许后续能够再整理一篇关于威联通系统的使用指南来。先记录一下自己要解决哪些问题吧：</p><ul><li>威联通NAS的首次安装</li><li>为家人设置权限账户（仅赋予使用的权限，降低家人使用成本和降低误操作）</li><li>配置远程访问</li><li>多设备照片自动上传+Photo Station与QuMagie的使用</li><li>远程离线下载与Video Station</li><li>多设备文件同步</li><li>数据备份（多备份方案）与快照</li><li>其他待定</li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nas </tag>
            
            <tag> 威联通 </tag>
            
            <tag> QNAP </tag>
            
            <tag> TS-453Dmini </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>此刻，突然想立一个flag</title>
      <link href="/posts/fc9160a3/"/>
      <url>/posts/fc9160a3/</url>
      
        <content type="html"><![CDATA[<p>刚折腾完博客的一些设置，突然想现在立一个flag，虽然离年末还有一个多月。这个flag就是：</p><blockquote><p>这是我最后一次重启博客计划了！</p></blockquote><p>从2009年自己开始接触到建站开始，过去模模糊糊做过很多站，也不乏自己的博客，但无一例外的都夭折了，不管是客观原因，还是主观的懒惰，但无一例外的都失败了。</p><p>早年间使用过WordPress、Zblog之类，最近几次是2014年尝试使用Hexo、2019年使用Typecho以及今年8月份使用Hugo和Maverick。</p><ul><li>2014年弃用Hexo是因为进入了自己的事业低谷期，创业失败，考虑撤退；</li><li>2019年弃用Typecho是因为自己的阿里云服务到期，没有续费；</li><li>2020年弃用Hugo和Maverick是因为静态博客还是太折腾，毕竟自己非技术专业。</li></ul><p>这次，趁着良心云（腾讯云）双11大促之际，以新用户的身份购入了1核2G的云服务器，288元&#x2F;3年。虽然在2014年我已买过腾讯云的产品，但这次咨询客服后确认我仍然具备新用户的优惠资格。</p><p>启用了一个从未使用过的域名，短巧好记，并将自己的主要域名都从阿里云上转移到了腾讯云，虽然未来交易上会繁琐些，但耐不住良心云给的券多便宜啊。</p><p>并且注销了自己原有主体的备案，新把这个域名做了主体备案（前后不到一周完成），今天也拿到了备案号。</p><p>同时选取了相对熟悉的Typecho，购买了优秀的handsome主题（主要看中时光机和整合了相册），这几天陆陆续续也配置的差不多了。除了照片管理（非相册展示）和云网盘的需求还不能完全解决外，个人导航、wiki这些需求也完全可以通过Typecho博客来实现。</p><p>想想么也都齐备了。这次自己也做足了持久战的准备，将博客形成习惯。不给自己日&#x2F;周更的压力，哪怕一年不更新博客也不撤（服务器三年时间内总会有那么几个瞬间让我冲动再续费三年～）</p><p>所以这次也立下这个flag，绝不撤退！（如果这篇文章有人看的话，也请大家监督～）</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151757677.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Flag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>财商学习-穷爸爸富爸爸里的四大象限</title>
      <link href="/posts/8ff6b23b/"/>
      <url>/posts/8ff6b23b/</url>
      
        <content type="html"><![CDATA[<ul><li>E是工薪一族；用时间赚钱；</li><li>S是自由职业者，用专业＋时间赚钱，做到极致可以成为网红，（用影响力＋专业赚钱），做就有钱，不做就没有钱。</li><li>B是企业主，靠系统赚钱，做到极致是大型集团上市公司；（用系统和团队做财富管道）</li><li>I是投资者，靠钱来赚钱，做到极致可以成为投资家；（用股权做财富管道）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151755492.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 赚大钱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财商 </tag>
            
            <tag> 穷爸爸富爸爸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻译｜使用Finances 2记账导入账单</title>
      <link href="/posts/f44788c1/"/>
      <url>/posts/f44788c1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在探索个人复式记账，除了当前流行的纯文本的复式记账<a href="http://furius.ca/beancount/">Beancount</a>外，也找到了可视化的<a href="https://hochgatterer.me/finances">Finances 2</a>（<a href="https://tsb2blog.com/bookkeepin">via</a>），尝试使用使用了两天后也很方便，日常使用非常简单，但导入导出恐怕是迁移历史记账数据的难点。于是将其帮助文档中关于导入的部分简单翻译了一下。<br>本文内容翻译自：<a href="https://hochgatterer.me/finances/help/import/">https://hochgatterer.me/finances/help/import/</a></p></blockquote><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>Finances 2支持从<a href="https://zh.wikipedia.org/wiki/%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E5%80%BC">CSV</a>文件导入数据。CSV文件是逗号分隔值文件。Finances 2需要日期和金额列才能成功导入CSV文件。</p><p>Finances 2从CSV文件中读取以下列。</p><ul><li><code>date</code>(必需)交易的日期和时间，例如：2017-03-08。</li><li><code>amount</code>(必需)交易的金额，例如：-10.25。</li><li><code>category</code>(可选)交易的类别，例如：家庭。如果不可用，则将交易分配给未分类的账户。<a href="https://hochgatterer.me/finances/help/import/_index.md#uncategorized-transactions">了解更多</a></li><li><code>account</code>(可选)交易的账户，例如：现金。如果不可用，则将交易分配给未分类的账户。<a href="https://hochgatterer.me/finances/help/import/_index.md#uncategorized-transactions">了解更多</a></li><li><code>counter account</code>(可选)是转账交易的收款账户，例如：支票。如果不可用，则该交易为支出或收入交易。</li><li><code>note</code>(可选)交易的描述，例如：购买食品。</li><li><code>payee</code>(可选)是交易的收款人，例如：沃尔玛，</li><li><code>number</code>(可选)是交易的编号，例如：201701。</li><li><code>cleared</code>(可选)表明交易是否已确认，例如：*表示已确认，为空则表示未确认。</li><li><code>currency</code>(可选)交易金额的货币，例如：USD。如果不可用，则使用默认货币。</li><li><code>debit</code>(可选)交易的借方值，例如：10.25。如果可用，则该交易为收入交易。</li><li><code>credit</code>(可选)交易的贷方值，例如：10.25。如果可用，则该交易为支出交易。</li></ul><p>例如下面的CSV文件：</p><table><thead><tr><th>date</th><th>account</th><th>category</th><th>amount</th></tr></thead><tbody><tr><td>2017-03-08</td><td>Cash</td><td>Household</td><td>-5.60</td></tr></tbody></table><p>将导入为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017-03-08</span><br><span class="line">    Assets:Cash        -$5.60</span><br><span class="line">    Expenses:Household  $5.60</span><br></pre></td></tr></table></figure><h4 id="未分类的交易"><a href="#未分类的交易" class="headerlink" title="未分类的交易"></a>未分类的交易</h4><p>如果CSV文件不包括交易的账户或类别，那么Finances 2将使用未分类的账户。导入数据后，需要将未分类的账户分配给收入或支出账户。Finances 2并不会自动帮你做到这一点。但Mac版本的Finances 2能够更方便的录入数据，您可以按这里的描述一次编辑多笔交易。</p><h4 id="导入设置"><a href="#导入设置" class="headerlink" title="导入设置"></a>导入设置</h4><p><strong>记账本</strong>——可以将交易记录导入到新的或者已有的记账本。如果选择导入到新的记账本中，该记账本将以导入的文件命名。</p><p>Mac版本的Finances 2还允许将数据导入到指定账户。如果对导入不含账户信息的CSV文件很有用，就像大多数来自银行的CSV文件一样。为此，您必须打开一个记账本，右键单击一个账户并选择导入，然后Mac版本的Finances 2会将没有账户的交易分配给指定的账户。</p><p><strong>预设</strong>——将CSV文件导入到Finances 2时，您可以从各种预设模板中进行选择。预置定义日期格式、文本编码、列分隔符、账户分隔符和列映射。这里有以下银行和应用程序的预设模板。</p><ul><li>银行：Bawak P.S.K, Erste Bank, Diners Club, mBank S.A., Navy Federal Credit Union, OTP Bank, Raiffeisen, Sparkasse, PayLife</li><li>应用：Cost, Depit &amp; Credit, Dollarbird, Finances 1, Finances 2, iFinance, Mint, Money, MoneyControl, MoneyWiz, Moni, Pocket Money, Quicken, SEE Finance 2, Spendee, YNAB</li></ul><p>如果您需要CSV文件的预设模板，请<a href="mailto:finances@hochgatterer.me">联系</a>。</p><p><strong>账户分隔符</strong>——帐户分隔符用于从单个字符串创建帐户层次结构。例如，字符串A:B将产生帐户A和B。帐户B将是A的子帐户。</p><h4 id="导入CSV文件"><a href="#导入CSV文件" class="headerlink" title="导入CSV文件"></a>导入CSV文件</h4><h6 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h6><ol><li>打开CSV文件，例如在iCloud Drive中</li><li>点击[分享]图标，并选择<code>Import with Finances</code></li><li>为您的CSV文件选择一个预置或配置日期格式、文本编码和分隔符</li><li>点击<code>Import</code></li></ol><h6 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h6><ol><li>选择<code>File</code>→<code>Import…</code></li><li>选择CSV并单击<code>Next</code></li><li>找到一个文件并单击<code>Choose</code></li><li>为您的CSV文件选择一个预置或配置日期格式、文本编码和分隔符</li><li>点击<code>Import</code></li></ol><h4 id="从Finances-1迁移"><a href="#从Finances-1迁移" class="headerlink" title="从Finances 1迁移"></a>从Finances 1迁移</h4><p>如果您正在使用Finances 1并希望将现有交易导入至Finances 2，请执行以下步骤：</p><ol><li>从Finances 1中导出数据为CSV文件<ul><li>前往App Settings → Export → Export As CSV</li></ul></li><li>将数据导入至Finances 2<ul><li>在Finances 2中打开CSV文件</li></ul></li><li>等待导入完成——这可能需要一些时间</li><li>设置初始账户余额——CSV文件不包括初始账户余额<ol><li>在Equity账户中创建名为期初余额的新账户</li><li>创建<a href="https://hochgatterer.me/finances/guide/account/#opening-balance">期初余额的交易</a></li></ol></li><li>更新收入和支出账户的颜色——CSV文件不包括类别颜色</li></ol><h4 id="导入失败"><a href="#导入失败" class="headerlink" title="导入失败"></a>导入失败</h4><p>导入失败有下面这些不同的原因。</p><p><strong>缺少数据</strong>——CSV文件缺少以下列</p><ul><li>date</li><li>amount</li></ul><p><a href="https://hochgatterer.me/finances/help/import">这里</a>了解有关所需列的更多信息。</p><p><strong>错误的日期格式</strong>——请确保日期格式配置正确。（Mac版本的Finances 2允许您自定义日期格式）</p><p><strong>错误的金额格式</strong>——金额使用的十进制分隔符与设备的区域设置不同。例如，美国使用<code>.</code>字符，而德国使用<code>,</code>字符作为十进制分隔符。在iOS设置 → 常规 → 语言和区域中进行相应的设置。</p><p>确保选择正确的导入预设，以防止导入CSV文件时出现问题。如果您的CSV数据没有预设，<a href="mailto:finances@hochgatterer.me">请告诉我们</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 赚大钱 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Finances 2 </tag>
            
            <tag> 复式记账 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>该自己反思的，是任何时候都不晚的</title>
      <link href="/posts/8789603e/"/>
      <url>/posts/8789603e/</url>
      
        <content type="html"><![CDATA[<p>之前犯过一些错，在错误发生时抱着侥幸心理，导致错误蔓延. 扩大。近期在与家人复盘时，得到这句话。深感受用。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151750202.png"></p><p>那自己就找了<a href="http://www.xuelaxuela.com/html/2016/09-08/10379.html">一篇文章</a>总结一下，人性的弱点都有哪些，平时多看看，自己有则改之. 无则加勉。毕竟古人说的好：</p><blockquote><p>吾日三省吾身</p></blockquote><hr><h4 id="1-幻想——思想的巨人，行动的矮子"><a href="#1-幻想——思想的巨人，行动的矮子" class="headerlink" title="1. 幻想——思想的巨人，行动的矮子"></a>1. 幻想——<strong>思想的巨人，行动的矮子</strong></h4><p>当人遇到挫折或难以解决的问题时，便脱离实际，想入非非，把自己放到想像的世界中，企图以虚构的方式应付挫折，获得满足。白日梦便是一种幻想，如果白日梦代替了有意义的行动，就会成为逃避现实的手段，也可能成为心里变态的征兆，发展成为幻想症。幻想是美丽的，现实是残酷的。幻想只是一种感觉，如想要人生有成，就应该立足于现实，尤其是为人处世时，更不可不切实际，否则就无法切实地解决问题，求得改变与发展。</p><h4 id="2-消极——对现实的退缩于逃避"><a href="#2-消极——对现实的退缩于逃避" class="headerlink" title="2. 消极——对现实的退缩于逃避"></a>2. 消极——<strong>对现实的退缩于逃避</strong></h4><p>消极的人往往给人一种不慕名利的虚假印像，其实他们的内心是极度空虚的，对待事情也是消极的。这种人什么也不想，什么也不去做，即使有再强的能力，终生也将一事无成。消极与积极在于看法与认识的不同。走在一条具有太多信息. 太多欲望和太多竟争的人生路上，我们总有几丝忧虑. 几多彷徨，还会常常有些无奈。但为了事业的成功和生活的幸福，必须建立一种积极的心态。每天给自己一个希望，你将拥有好的心情，你的心态往往就是你真正的主人。</p><h4 id="3-自负——无知者的自我膨胀"><a href="#3-自负——无知者的自我膨胀" class="headerlink" title="3. 自负——无知者的自我膨胀"></a>3. 自负——<strong>无知者的自我膨胀</strong></h4><p>自信十分重要，这是毋庸置疑的，但如果“过分”自信就会变成“自负”。“自信”和“自负”之间存在一个度，但很多人却因为成功而自我膨胀，以至于陷入自负的心里陷阱。自负有时表现为狂妄，自认为无所不能，过高地估记自己，看不起身边的人。因此，自负的人常会陷入狂躁之境，最终走向失败。</p><h4 id="4-草率——失败者的根源"><a href="#4-草率——失败者的根源" class="headerlink" title="4. 草率——失败者的根源"></a>4. 草率——<strong>失败者的根源</strong></h4><p>生活中常常出现这种情况，有些人在遇到事情时不加考虑，匆忙决定后又后悔不已，有时甚至造成不可挽回的局面。可是这世上根本没有后悔药，我们无法预知明天，所以许多事情的成败常常取决于我们是谨慎小心还是草率鲁莽。有些人之所以失败了，也许就是他们缺乏思考和准备，而那些头脑理智的人总是经过周密考虑后才采取行动，因而这样的人最容易成功。</p><h4 id="5-傲慢——得不到支持的尊严"><a href="#5-傲慢——得不到支持的尊严" class="headerlink" title="5. 傲慢——得不到支持的尊严"></a>5. 傲慢——<strong>得不到支持的尊严</strong></h4><p>常言道：“天不言自高，地不言自厚。”一般来说，知道东西越多的人就会越谦虚，而知道得越少. 气量越小的人就会越傲慢，因此我们可以说傲慢是虚荣和一知半解的结合物。过分傲慢的人摆出一副“趾高气杨，不可一世”的态度，这让他们常常遭到别人的反感，使他们处处碰壁. 寸步难行。</p><h4 id="6-多疑——无中生有的心灵枷锁"><a href="#6-多疑——无中生有的心灵枷锁" class="headerlink" title="6. 多疑——无中生有的心灵枷锁"></a>6. 多疑——<strong>无中生有的心灵枷锁</strong></h4><p>古语有云：“长相知，不相疑”，其实这句话也可反过来说，不相疑，才能长相知。但是猜疑是人性的弱点之一，也一直都是害人害己的祸根。多疑会让人们对身边的每件事情习惯性地往坏和消极方面想，一个人一旦掉入猜疑的陷阱中就容易对每件事神经过敏，让别人对自己也产生疑虑，这对正常的人际关系是不利的，而且疑心最终也会使自己陷入紧张和焦虑之中。</p><h4 id="7-奢侈——有钱时摆阔，没钱时挨饿"><a href="#7-奢侈——有钱时摆阔，没钱时挨饿" class="headerlink" title="7. 奢侈——有钱时摆阔，没钱时挨饿"></a>7. 奢侈——<strong>有钱时摆阔，没钱时挨饿</strong></h4><p>奢侈是一种毒药，一旦沾染，就会不断蔓延开来，而且传播速度很快，波及范围很广，一个人开始追求奢侈的生活，那么，周围的人很快就会奢侈起来。浪费是最大的犯罪，如果你浪费时间，那是在消耗生命;如果你浪费金钱，那么，你就走在通往灭亡的道路上。</p><h4 id="8-自闭——画地为牢，把世界关在门外"><a href="#8-自闭——画地为牢，把世界关在门外" class="headerlink" title="8. 自闭——画地为牢，把世界关在门外"></a>8. 自闭——<strong>画地为牢，把世界关在门外</strong></h4><p>把自己封闭起来，可以躲避风雨，但是阳光也进不来了。一个能够打开心扉，迎接阳光的人是永远不会自闭的。如有阳光一样的心态，你就不会在抑郁失落中迷失自己，你就不会失去方向。正确地估量自己的价值，并且让自己持续地“增值”，这是一种积极的人生态度，这样，你的生命才不会白白的度过，才会觉得每一天都是有意义的。</p><h4 id="9-偏执——偏重于自我的执着"><a href="#9-偏执——偏重于自我的执着" class="headerlink" title="9. 偏执——偏重于自我的执着"></a>9. 偏执——<strong>偏重于自我的执着</strong></h4><p>有主见，有头脑，不随声附和，不与世沉浮，这无疑是值得称道的好品质，但是应该以不执己见，不偏激执拗为前提。无论是做人还是做事，头脑都应该存有辩证的观点，死守一隅，坐井观天，把自己的偏见当成真理，而且至死不悟，这是为人处世的大忌，如果我们不能及时纠正这种态度，就很可能会误入人生的死角，抽不出身来。</p><h4 id="10-急功近利——不思长远的“近视眼”"><a href="#10-急功近利——不思长远的“近视眼”" class="headerlink" title="10. 急功近利——不思长远的“近视眼”"></a>10. 急功近利——<strong>不思长远的“近视眼”</strong></h4><p>急功近利的人目光短浅，一叶障目，不见泰山，只要闻到芝麻香，就会忘却西瓜甜。人们的视野只能看到眼前，所谓“头痛医头，脚痛医脚“，是急功近利者一贯的行为方式。为了摆脱眼前的状况，这些人可以不顾未来的利益，只为求得一时的痛快，而不长远考虑。其结果往往是得不偿失的。</p><h4 id="11-贪婪——心灵的贫穷，灾祸的根源"><a href="#11-贪婪——心灵的贫穷，灾祸的根源" class="headerlink" title="11. 贪婪——心灵的贫穷，灾祸的根源"></a>11. 贪婪——<strong>心灵的贫穷，灾祸的根源</strong></h4><p>人在现实中生活，不可能没有欲望，欲壑难填，对金钱的欲望，使很多人变得贪婪无比。诚然，金钱是人们生活的基本保障，但是在解决生活所需之后，不能一味地贪求。古语有云：“多贪不如少用。”人对钱财的欲望应该有一个度，如果超过了度就要想办法让自己停下来，不要因为过分贪婪换来后悔莫及的结果。</p><h4 id="12-无原则——被丢弃的道德"><a href="#12-无原则——被丢弃的道德" class="headerlink" title="12. 无原则——被丢弃的道德"></a>12. 无原则——<strong>被丢弃的道德</strong></h4><p>利益在生活中经常被追捧，甚至有人喜欢把自己的一切准则都与利益画等号。和自己的亲人. 朋友以及其他人相处的时侯，时时刻刻都以自己的利益为重。诚然，对很多人来说，利益是非常重要的，但是，如果把利益作为自己做事的准则，那么到后来，这样做的人只能是搬起石头砸自己的脚。利益有时侯还会成为别人引诱自己的陷井，而以利益为准则的人，掉进陷井的几率比跳过去的几率要大很多。</p><h4 id="13-嫉妒——诋毁别人的成就，暴露自己的无能"><a href="#13-嫉妒——诋毁别人的成就，暴露自己的无能" class="headerlink" title="13. 嫉妒——诋毁别人的成就，暴露自己的无能"></a>13. 嫉妒——<strong>诋毁别人的成就，暴露自己的无能</strong></h4><p>嫉妒是人心上的肿瘤。嫉妒可以让美丽的人变得丑陋无比，可以让热情的人变得冷若冰霜。嫉妒是一种憎恨式的感情，拥有嫉妒的人，看见别人比自己过得好，比自己运气好，就会恨得咬牙切齿；而看见别人比自己运气差，过得没有自己好，就会洋洋得意。这样的感情，对人际关系会产生极其不利的影响。人应该用一颗豁达的心去看待这个世界，因为嫉妒心只能把人送到疯狂. 崩溃的边缘，而不会让人获得美好和幸福。</p><h4 id="14-固执——盘踞于心灵的愚眛根源"><a href="#14-固执——盘踞于心灵的愚眛根源" class="headerlink" title="14. 固执——盘踞于心灵的愚眛根源"></a>14. 固执——<strong>盘踞于心灵的愚眛根源</strong></h4><p>固执是一种坚持成见，不懂得变通的心理现象。人对事物的认知，以及对事物价值的评判都要通过自己的价值观来完成，这本身就带有极其浓郁的主观色彩。如果对一个事物的认识错误，但是又不愿接受别人的意见进行有效的改正，就会错上加错。固执并不是坚持的近义词。其实，打开固执的枷锁也并不是一件困难的事情，只要能及时地改正自己错误的观点，有效地接受新事物，很容易就能打开固执的心灵枷锁。</p><h4 id="15-轻诺寡信——轻诺寡信，多易必多难"><a href="#15-轻诺寡信——轻诺寡信，多易必多难" class="headerlink" title="15. 轻诺寡信——轻诺寡信，多易必多难"></a>15. 轻诺寡信——<strong>轻诺寡信，多易必多难</strong></h4><p>诚信为立身之本，要做到诚信，重要的一点就是不轻易承诺，这样才能避免背信弃义。如果不经过深思熟虑就答应别人的要求，事后又做不到，这样的人就不会获得他人的信任。答应别人的事就要做到，要一诺千金。孔子说：“民无信不立。”人的言行要以诚信为本。</p><h4 id="16-张扬——浅薄者的朋友"><a href="#16-张扬——浅薄者的朋友" class="headerlink" title="16. 张扬——浅薄者的朋友"></a>16. 张扬——<strong>浅薄者的朋友</strong></h4><p>有着张扬性格的人狂妄自大. 盛气凌人. 锋芒太露，言行之间容易招致非议，伤人伤己，因此做人要谨言慎行。“谦受益，满招损。”无论是才华满腹还是志高意满时，都不可趾高气阳. 骄傲自大，而应该在充分发挥自己才华的同时收起锋芒，低调处世。《老子》曰：“不自见，故明；不自是，故彰；不自伐，故有功；不自矜，故长。”即便是有才华而不得志的时侯，也无需悲观或者埋怨生活的不公，要做到淡然处之，以低姿态做人。</p><h4 id="17-虚荣——一切恶行都围绕虚荣心而生"><a href="#17-虚荣——一切恶行都围绕虚荣心而生" class="headerlink" title="17. 虚荣——一切恶行都围绕虚荣心而生"></a>17. 虚荣——<strong>一切恶行都围绕虚荣心而生</strong></h4><p>虚荣是追求个人的荣耀和表面的光环，以求博得别人的欣赏. 尊敬的表现。爱慕虚荣的人都有较强的自卑心里，他们不知道，内心空虚无知. 外表光鲜的人反而招人厌烦。气实. 每个人或多或少都会有一些虚荣心，不应该把它扩大升级，而应该通过虚荣心看到自己的不足和缺点，加强学习和改进，不断提升. 激励自己，勇往直前。</p><h4 id="18-拜金——为自己套上黄金的枷锁"><a href="#18-拜金——为自己套上黄金的枷锁" class="headerlink" title="18. 拜金——为自己套上黄金的枷锁"></a>18. 拜金——<strong>为自己套上黄金的枷锁</strong></h4><p>毋庸置疑，金钱在人们的生活中起着重要的作用，但是金钱不是人生的全部。钱财是生外之物，不要被金钱和自己的贪婪迷或了双眼，应适可而止。把贪心戒除，这样就能知足常乐，解开束缚人的脚镣。除此之外也不要吝啬，能够帮助别人也是一种幸福。不把金钱看得太重，学会舍得，才能把握住人生的机会和命运。</p><h4 id="19-冲动——陷于悔恨与自责的漩涡"><a href="#19-冲动——陷于悔恨与自责的漩涡" class="headerlink" title="19. 冲动——陷于悔恨与自责的漩涡"></a>19. 冲动——<strong>陷于悔恨与自责的漩涡</strong></h4><p>在日常生活中，确实会有许多事情让我们气愤. 很无奈，但是无论自己的情绪多么冲动，都不能失去理智，更不能不顾一切地采取过激的行为。“事缓则圆”任何事情的解决都是理智加公平的结果，一味冲动不仅于事无补，反而往往会造成让我们难以承担的后果。因次，在遇到窘境时用理智控制自己的行为才是明智的选择。</p><h4 id="20-盲从——失去自我的可怜人"><a href="#20-盲从——失去自我的可怜人" class="headerlink" title="20. 盲从——失去自我的可怜人"></a>20. 盲从——<strong>失去自我的可怜人</strong></h4><p>很多人都会盲目地追求大众潮流，这是很多人都具有的心理特征，同时也是一个非常危险的心灵陷阱。因为每个人的人生观. 价值观. 道德观都是不同的，因此每个人的选择方向也应该是不同的。因为盲从，我们往往丧失了自我，迷失了自我的个性，丧失了自我判断力和自信心。</p><h4 id="21-自我设限——杀死你的潜能力"><a href="#21-自我设限——杀死你的潜能力" class="headerlink" title="21. 自我设限——杀死你的潜能力"></a>21. 自我设限——<strong>杀死你的潜能力</strong></h4><p>“上帝只拯救能够自救的人”。成功属于愿意成功的人。狭隘的心理是阻碍人前进的障碍，很多时侯，一个人的失败并不是受客观环境的影响，而是自我设限的心理已经注定了不能成功。自我设限的狭隘心理使一个人的心胸不宽广，使一个人的的眼界不开阔，使一个人的目光短浅甚至还会使人产生严重的自恋情结，有这种心理的人很难与他相处，而且容易伤害他人。这种人是天生的失败者，因为自我封闭和自我设限，他们陷入了精神上的贫瘠和恐慌中。</p><h4 id="22-报复心——小鸡肚肠，睚眦必报"><a href="#22-报复心——小鸡肚肠，睚眦必报" class="headerlink" title="22. 报复心——小鸡肚肠，睚眦必报"></a>22. 报复心——<strong>小鸡肚肠，睚眦必报</strong></h4><p>报复心是无底的黑洞，源自于仇恨的怒火。如果不能及时控制报复心理，而任由报复心吞噬自我，就会失去理智，做出莽撞乃至让自己后悔的事情。报复心强的人容易意气用事，一旦急火攻心，常常只顾发泄心中的情绪而不听从别人的劝告。他们无法坦然面对挫折，不会宽恕他人，往往为了贪一时之快而伤人害己，结果既失去了人缘，又把自己也推入了麻烦的陷阱中。</p><h4 id="23-侥幸——自我欺骗的放纵"><a href="#23-侥幸——自我欺骗的放纵" class="headerlink" title="23. 侥幸——自我欺骗的放纵"></a>23. 侥幸——<strong>自我欺骗的放纵</strong></h4><p>侥幸心理是一种非常不健康的心理，这种心理使人的思想受到蒙蔽，从而做不出正确的判断，甚至迷失方向。久而久之，人们的思想便会在不知不觉中发生变化。其实严重的后果都是由一点一滴的小事积累起来形成的，因此要从小事开始防范。偶尔一次侥幸可能会使人取得成绩或者得到某种益处，但总有一天会跌倒。任何时候都要丢弃侥幸心里，提高自己的品德修养，一步一个脚印地实现理想。须知“宝剑锋从磨砺出，梅花香自苦寒来，”唯有踏实勤奋才能走上成功的道路。</p><h4 id="24-强求完美——自卑与不自信的怪胎"><a href="#24-强求完美——自卑与不自信的怪胎" class="headerlink" title="24. 强求完美——自卑与不自信的怪胎"></a>24. 强求完美——<strong>自卑与不自信的怪胎</strong></h4><p>中国有句古训：金无赤金，人无完人。俄国着名哲学家车尔尼雪夫斯基说：“既然太阳上也有黑点，人世间的事情就更不可能没有缺陷。”世界上本来就没有一片完美的树叶，但是在现实生活中，却总是存在追求完美的人。他们不但对自己有着完美苛刻的要求，对身边的人和事也都抱着同样的态度。因为过度地追求完美，他们失去了很多愉快幸福的生活，甚至自己的生命。</p><h4 id="25-失去目标——斗志的迷失"><a href="#25-失去目标——斗志的迷失" class="headerlink" title="25. 失去目标——斗志的迷失"></a>25. 失去目标——<strong>斗志的迷失</strong></h4><p>失败是不需要计划的，而成功则需要一个周密的计划并一步一步地去实践它。古今中外，大凡事业有所成就者都具备两点：一个是自己有着清晰的事业目标；二是朝着目标不停的奋斗。没有目标的人就像一艘盲目航行的船一样，对它来说任何方向的风都是逆风；而如果一个人有了目标，并且坚定地朝着目标前进，那么整个世界都会为它让路。因此想要成功，就得从一点一滴做起，给自己制定一个明确的. 长期的. 具体的目标，充分利用好时间，带着目标上路，就会到达目的地。</p><h4 id="26-中年危机——重压之下的情绪风暴"><a href="#26-中年危机——重压之下的情绪风暴" class="headerlink" title="26. 中年危机——重压之下的情绪风暴"></a>26. 中年危机——<strong>重压之下的情绪风暴</strong></h4><p>人的生命曲线从高峰跌下，而工作和家庭的负担曲线则向上升去，这两条抛物线的相交点正是中年。人到中年，会对工作. 事业都不满意，认为眼前没有任何挑战值得全力以赴，会变得死气沉沉. 喜怒无常. 悲观消极；人到中年会遭遇事业和家庭的双重压力，心里和身体上出现下滑的迹象，这就更加重了中年危机以及困惑。陷入中年危机心灵陷阱的人会出现一系列的消极情绪，引发心里上的问题，并伴随着出现身体上的反应。只有树立积极的心态，用充满自信的心态来应对的中年人才能平稳地度过这一时期。</p>]]></content>
      
      
      <categories>
          
          <category> 过日子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反省 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用VS Code+PicGo+Github打造好用的博客图床</title>
      <link href="/posts/c6ccae09/"/>
      <url>/posts/c6ccae09/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Markdown图片的管理一直是个难题，而使用图床是一个当前比较流行的做法。但又不想使用过多的第三方服务，搜索了一圈发现当前这个方案似乎比较适合自己，配置起来又不会过于繁琐。这里也将整体的方案记录下来。</p></blockquote><blockquote><p><strong>2020-08-31更新</strong>：有点尴尬的是，刚写完本文第二天我的Macbook中的VS Code PicGo扩展快捷键<code>Cmd + Opt + U</code>不知何故失效了，初步判断是和某个App的快捷键冲突了，找了一圈无果。故转而使用<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo独立应用</a>而非<a href="https://github.com/PicGo/vs-picgo">PicGO扩展</a>了。<br><strong>两个切换Tips</strong>：</p><h4 id="1-PicGo独立应用展示PicGO扩展的历史上传记录"><a href="#1-PicGo独立应用展示PicGO扩展的历史上传记录" class="headerlink" title="1.PicGo独立应用展示PicGO扩展的历史上传记录"></a>1.<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo独立应用</a>展示<a href="https://github.com/PicGo/vs-picgo">PicGO扩展</a>的历史上传记录</h4><ul><li><a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo独立应用</a>的历史上传记录在<code>~/Library/Application Support/picgo/data.json</code></li><li><a href="https://github.com/PicGo/vs-picgo">PicGO扩展</a>的历史上传记录在<code>your_home_dir/vs-picgo-data.json</code></li><li>两者格式一致，手动复制过来即可</li><li>注：<a href="https://github.com/upupming/picgo-plugin-vscode-migrator">picgo-plugin-vscode-migrator</a>已失效无法使用<h4 id="2-PicGo独立应用和PicGO扩展的时间戳重命名区别"><a href="#2-PicGo独立应用和PicGO扩展的时间戳重命名区别" class="headerlink" title="2.PicGo独立应用和PicGO扩展的时间戳重命名区别"></a>2.<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo独立应用</a>和<a href="https://github.com/PicGo/vs-picgo">PicGO扩展</a>的时间戳重命名区别</h4></li><li><a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo独立应用</a>的时间戳重命名格式为YYYYMMDD</li><li><a href="https://github.com/PicGo/vs-picgo">PicGO扩展</a>YYYY-MM-DD</li></ul><p>好在本方案刚刚启用，已上传的图片并不多，手动修正了上述两个小问题后，后续还是老老实实使用<a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo独立应用</a>吧~ε(┬┬﹏┬┬)3</p></blockquote><h2 id="一、方案亮点"><a href="#一、方案亮点" class="headerlink" title="一、方案亮点"></a>一、方案亮点</h2><p>使用<a href="https://github.com/">Github</a>作为图床的托管，一方面经济、稳定，另一方面也能少一些托管服务商，方便整体的备份。至于速度问题，可以使用<a href="https://www.jsdelivr.com/">jsDelivr</a>来解决.</p><p>使用<a href="https://code.visualstudio.com/">VS Code</a>+<a href="https://github.com/PicGo/vs-picgo">PicGO扩展</a>，来解决使用时的便捷性问题，毕竟少一个应用软件，就能少分心一些。</p><p>综上，本方案具备的特点是：免费、快速、稳定、易管理。</p><h2 id="二、Github仓库配置"><a href="#二、Github仓库配置" class="headerlink" title="二、Github仓库配置"></a>二、Github仓库配置</h2><p>1.在Github上新建一个名为<code>My_images</code>的仓库，并初始化，初始化时记得设置默认分支为<code>main</code>（<a href="https://weibo.com/ttarticle/p/show?id=2309404516196870390640">不使用master分支的原因？</a>）</p><p>2.在Github中的<a href="https://github.com/settings/tokens">创建一个Token</a>（记得在页面关闭前保存下来，页面一旦关闭就再也看不到了）</p><p>只需要这两步，就可以关闭Github的页面了。</p><h2 id="三、VS-Code-PicGo配置"><a href="#三、VS-Code-PicGo配置" class="headerlink" title="三、VS Code +PicGo配置"></a>三、VS Code +PicGo配置</h2><p>1.在安装好VS Code的情况下，搜索扩展<code>PicGo</code>，并安装</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151744219.png"></p><p>2.打开扩展<code>PicGo</code>的配置页面，依据自己的情况完善即可</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151745401.png"></p><ul><li><strong>Picgo: Custom Output Format</strong> 自定义输出格式，我使用<code>![]($&#123;url&#125;)</code></li><li><strong>Picgo: Custom Upload Name</strong> 自定义上传文件名，我使用<code>$&#123;dateTime&#125;$&#123;extName&#125;</code></li><li><strong>Picgo › Pic Bed: Current</strong> 使用的图床服务，我使用Github</li><li><strong>Picgo › Pic Bed › Github: Branch</strong> Github的分支，我使用<code>main</code></li><li><strong>Picgo › Pic Bed › Github: Custom Url</strong> 自定义Url前缀，我使用<code>https://cdn.jsdelivr.net/gh/mlosun/My_images@main</code></li><li><strong>Picgo › Pic Bed › Github: Path</strong> Github的文件路径，我使用<code>BlogImages/</code></li><li><strong>Picgo › Pic Bed › Github: Repo</strong> Github的用户名&#x2F;仓库名，我使用<code>mlosun/My_images</code></li><li><strong>Picgo › Pic Bed › Github: Token</strong> Github的Token值，填入之前在Github生成的Token即可</li></ul><p>也只需这两部，整个方案就已配置完毕。</p><h2 id="四、使用方案"><a href="#四、使用方案" class="headerlink" title="四、使用方案"></a>四、使用方案</h2><table><thead><tr><th>系统</th><th>从剪贴板上传图片</th><th>从资源管理器上传图片</th><th>从输入框上传图片</th></tr></thead><tbody><tr><td>Windows&#x2F;Unix</td><td>Ctrl + Alt + U</td><td>Ctrl + Alt + E</td><td>Ctrl + Alt + O</td></tr><tr><td>MacOS</td><td>Cmd + Opt + U</td><td>Cmd + Opt + E</td><td>Cmd + Opt + O</td></tr></tbody></table><h2 id="五、配置补充说明"><a href="#五、配置补充说明" class="headerlink" title="五、配置补充说明"></a>五、配置补充说明</h2><p>配置项比较简单，都没什么好说的，唯有以下三个需要稍微补充下</p><h3 id="1-自定义输出格式"><a href="#1-自定义输出格式" class="headerlink" title="1.自定义输出格式"></a>1.自定义输出格式</h3><p>配置项：<code>Picgo: Custom Output Format</code>，这里决定了将图片上传后，输出什么样的内容到VS Code的，一般使用Markdown的格式<code>![]()</code>即可，可选参数：</p><ul><li><code>$&#123;url&#125;</code>url地址</li><li><code>$&#123;uploadedName&#125;</code>上传后的文件名（即时下面自定义上传的文件名中包含了扩展名，也不带扩展名）</li></ul><h3 id="2-自定义上传文件名"><a href="#2-自定义上传文件名" class="headerlink" title="2.自定义上传文件名"></a>2.自定义上传文件名</h3><p>配置项：<code>Picgo: Custom Upload Name</code>，这里决定了图片上传后的名称，可选参数：</p><ul><li><code>$&#123;fileName&#125;</code>本地的文件名</li><li><code>$&#123;extName&#125;</code>本地的文件扩展名</li><li><code>$&#123;mdFileName&#125;</code>Markdown文件的名称</li><li><code>$&#123;date&#125;</code>当日日期（格式2020-08-28）</li><li><code>$&#123;dateTime&#125;</code>当前日期时间（格式2020-08-28-12-30-10）</li></ul><h3 id="3-自定义Url"><a href="#3-自定义Url" class="headerlink" title="3.自定义Url"></a>3.自定义Url</h3><p>配置项：<code>Picgo › Pic Bed › Github: Custom Url</code>，这里决定了图片的自定义Url地址前缀</p><ol><li>Github上图片的默认地址，可填入<code>https://raw.githubusercontent.com/用户名/仓库名/分支名</code></li><li>若将Github仓库绑定域名后，可填入<code>https://绑定的域名</code></li><li>若需要使用jsDelivr加速服务，可填入<code>https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名</code></li></ol><p>我需要使用jsDelivr服务，同时也绑定了域名，所以三种方式都可以访问到图片资源，示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://raw.githubusercontent.com/mlosun/My_images/main/BlogImages/20200828130012.png</span><br><span class="line">https://images.mlosun.com/BlogImages/20200828130012.png</span><br><span class="line">https://cdn.jsdelivr.net/gh/mlosun/My_images@main/BlogImages/20200828130012.png</span><br></pre></td></tr></table></figure><h2 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h2><ul><li><a href="https://shanya.world/archives/2fb4d43a.html">VSCode + Github + Picgo + jsDelivr 搭建稳定快速高效图床</a></li><li><a href="https://nsoft.vip/2019/03/14/190314-%E5%9B%BE%E5%BA%8A%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/">Visual Studio Code 图床工具插件你值得拥有</a></li><li><a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo-图片上传、管理新体验</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 图床 </tag>
            
            <tag> vscode </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hugo+Github Actions实现自动化部署博客</title>
      <link href="/posts/beeeabdb/"/>
      <url>/posts/beeeabdb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>很早就想搭建一个自己的博客了，因为某些原因一直为付诸行动。直到近期自己对建博的需求愈发强烈，在尝试过了各类流行的方案后，选择Hugo+Github Action来实现静态博客的自动化部署。这里也将整理过的流程记录下来，也作为新博客的第一篇文章。</p></blockquote><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>安装<a href="https://git-scm.com/">Git</a>、<a href="https://gohugo.io/">Hugo</a>，注册<a href="https://github.com/">Github</a>账号，网上教程很多就不再赘述，我使用MacOS系统，Windows系统用户可自行调整。</p><p>注：请自行将下文中的<code>My_blog</code>、<code>mlosun</code>替换为自己的仓库名、站点名、文件夹名、用户名</p><h2 id="二、初始化Hugo项目"><a href="#二、初始化Hugo项目" class="headerlink" title="二、初始化Hugo项目"></a>二、初始化Hugo项目</h2><h3 id="1-新建站点"><a href="#1-新建站点" class="headerlink" title="1.新建站点"></a>1.新建站点</h3><p>本地安装好各类环境后，终端通过<code>hugo new site My_blog</code>新建站点，生成hugo站点的默认目录，目录树如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">My_blog  </span><br><span class="line">├─ archetypes     </span><br><span class="line">│  └─ default.md  </span><br><span class="line">├─ content        </span><br><span class="line">├─ data           </span><br><span class="line">├─ layouts        </span><br><span class="line">├─ static         </span><br><span class="line">├─ themes         </span><br><span class="line">└─ config.toml    </span><br></pre></td></tr></table></figure><h3 id="2-安装主题"><a href="#2-安装主题" class="headerlink" title="2.安装主题"></a>2.安装主题</h3><p>Hugo默认不带主题，可以在<a href="https://themes.gohugo.io/">官方主题仓库</a>选择喜欢的主题，本次我使用了国产的<a href="https://themes.gohugo.io/hugo-theme-zozo/">Zozo主题</a>，在主题页面下载好主题文件后，将主题文件复制到<code>themes</code>文件夹下，并重命名为<code>zozo</code>，并将主题的示例文件<code>exampleSite</code>目录下的示例文件复制到项目根目录下替换原有文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">My_blog</span><br><span class="line">├─ archetypes                          </span><br><span class="line">│  └─ default.md                       </span><br><span class="line">├─ content                             </span><br><span class="line">│  ├─ about                            </span><br><span class="line">│  │  └─ index.md                      </span><br><span class="line">│  └─ posts                            </span><br><span class="line">│     ├─ chinese-preview.md            </span><br><span class="line">│     ├─ english-preview.md                 </span><br><span class="line">│     ├─ japanese-preview.md           </span><br><span class="line">│     └─ theme-preview.md              </span><br><span class="line">├─ data                                </span><br><span class="line">├─ layouts                                                 </span><br><span class="line">├─ static                              </span><br><span class="line">│  ├─ 100.jpg                                                    </span><br><span class="line">├─ themes                              </span><br><span class="line">│  └─ zozo                                          </span><br><span class="line">│     └─ 主题文件                   </span><br><span class="line">├─ config.toml                         </span><br><span class="line">└─ netlify.toml                        </span><br></pre></td></tr></table></figure><p>终端进入项目目录<code>cd My_blog</code>，输入<code>hugo server -D -w</code>命令后，在浏览器中访问<a href="http://localhost:1313/">http://localhost:1313</a>进行预览。</p><p>若没有问题，初始化Hugo项目完成。</p><h2 id="三、Git仓库配置"><a href="#三、Git仓库配置" class="headerlink" title="三、Git仓库配置"></a>三、Git仓库配置</h2><p>在Github上创建名为<code>My_blog</code>的公开仓库，创建时无需进行初始化</p><p>依次在终端中执行以下命令：</p><ol><li><code>git init</code>初始化仓库</li><li><code>git remote add origin https://github.com/mlosun/My_blog.git</code>连接远端仓库</li><li><code>git checkout -b develop</code>切换至develop分支（<a href="https://weibo.com/ttarticle/p/show?id=2309404516196870390640">不使用master分支的原因？</a>）</li><li><code>git add .</code>暂存全部文件</li><li><code>git commit -m &quot;first commit&quot;</code>提交</li><li><code>git push -u origin develop</code>推送到远端仓库</li></ol><p>执行完毕后去Github上看下文件是否都已上传，顺手在Github上新建一个<code>gh-pages</code>分支</p><h2 id="四、自动化部署"><a href="#四、自动化部署" class="headerlink" title="四、自动化部署"></a>四、自动化部署</h2><p>在Github中的<a href="https://github.com/settings/tokens">创建一个Token</a>(记得在页面关闭前保存下来，页面一旦关闭就再也看不到了),回到<code>My_blog</code>项目仓库中在<code>Settings/Secrets</code>创建一个<code>Secrets</code>，标题命名为<code>personal_token</code>，内容填入刚刚创建的<code>Token</code>。</p><p>本地<code>My_blog</code>目录中新建<code>.github/workflows/deploy.yml</code>，内容填入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">name: Deploy Hugo</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - develop</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build-deploy:</span><br><span class="line">    runs-on: ubuntu-18.04</span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v1  # v2 does not have submodules option now</span><br><span class="line">        # with:</span><br><span class="line">          # submodules: true</span><br><span class="line"></span><br><span class="line">      - name: Setup Hugo</span><br><span class="line">        uses: peaceiris/actions-hugo@v2</span><br><span class="line">        with:</span><br><span class="line">          hugo-version: latest</span><br><span class="line">          # extended: true</span><br><span class="line"></span><br><span class="line">      - name: Build</span><br><span class="line">        run: hugo</span><br><span class="line"></span><br><span class="line">      - name: Deploy</span><br><span class="line">        uses: peaceiris/actions-gh-pages@v3</span><br><span class="line">        with:</span><br><span class="line">          personal_token: $&#123;&#123; secrets.personal_token &#125;&#125; # 这里的 ACTIONS_DEPLOY_KEY 则是上面设置 Private Key的变量名</span><br><span class="line">          PUBLISH_BRANCH: gh-pages</span><br><span class="line">          PUBLISH_DIR: ./public</span><br><span class="line">          commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125;</span><br></pre></td></tr></table></figure><p>依次在终端中执行以下命令：</p><ol><li><code>git add .</code>暂存全部文件</li><li><code>git commit -m &quot;Github Action自动化部署&quot;</code>提交</li><li><code>git push -u origin develop</code>推送到远端仓库</li></ol><p>等待Github仓库中Actions<code>Deploy Hugo</code>执行完毕后，看下<code>gh-pages</code>分支是否已生成HTML文件。</p><h2 id="五、其他补充内容"><a href="#五、其他补充内容" class="headerlink" title="五、其他补充内容"></a>五、其他补充内容</h2><h3 id="1-绑定域名"><a href="#1-绑定域名" class="headerlink" title="1.绑定域名"></a>1.绑定域名</h3><p>在本地<code>static</code>目录下新建<code>CNAME</code>文件，内容填入绑定的域名<code>www.mlosun.com</code>，同时也需要将域名解析至<code>mlosun.github.io.</code></p><p>后依次在终端中执行：</p><ol><li><code>git add .</code>暂存全部文件</li><li><code>git commit -m &quot;绑定域名&quot;</code>提交</li><li><code>git push -u origin develop</code>推送到远端仓库</li></ol><h3 id="2-修改主题配置"><a href="#2-修改主题配置" class="headerlink" title="2.修改主题配置"></a>2.修改主题配置</h3><p>修改<code>confit.toml</code>文件，之前从<a href="https://themes.gohugo.io/hugo-theme-zozo/">Zozo主题</a>复制过来的<code>My_blog/confit.toml</code>文件中对大部分配置都有详细的注释说明，根据自己情况修改即可</p><p>注：<code>baseURL</code>字段记得必须修改，否则页面会无法加载样式</p><p>后依次在终端中执行：</p><ol><li><code>git add .</code>暂存全部文件</li><li><code>git commit -m &quot;修改主题配置&quot;</code>提交</li><li><code>git push -u origin develop</code>推送到远端仓库</li></ol><h3 id="3-开启Valine评论"><a href="#3-开启Valine评论" class="headerlink" title="3.开启Valine评论"></a>3.开启Valine评论</h3><p>在<code>confit.toml</code>文件中找到<code>[params.valine]</code>部分，填入从<a href="https://www.leancloud.cn/">LeanCloud</a>获取到的AppID和AppKey，将<code>enable</code>更改为<code>true</code>即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[params.valine]</span><br><span class="line">  enable = true</span><br><span class="line">  appId = &quot;&quot;</span><br><span class="line">  appKey = &quot;&quot;</span><br><span class="line">  placeholder = &quot;期待你一针见血的评论，Come on！&quot;</span><br><span class="line">  visitor = true</span><br></pre></td></tr></table></figure><p>后依次在终端中执行：</p><ol><li><code>git add .</code>暂存全部文件</li><li><code>git commit -m &quot;开启Valine评论&quot;</code>提交</li><li><code>git push -u origin develop</code>推送到远端仓库</li></ol><h3 id="3-访问测试"><a href="#3-访问测试" class="headerlink" title="3.访问测试"></a>3.访问测试</h3><p>尝试访问<a href="https://www.mlosun.com/">www.mlosun.com</a>，看是否能顺利打开，页面显示是否正常等.</p><h2 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h2><ul><li><a href="https://immmmm.com/hugo-github-actions/">Hugo + Github Actions 实现自动化部署</a></li><li><a href="https://www.nashome.cn/posts/hugo-github-actions/">用 Hugo 配合 Github Actions 自动构建我的博客</a></li><li><a href="https://piggy.site/posts/deploy-hugo-on-github-pages/">Deploy Hugo on Github Pages</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Maverick创建博客</title>
      <link href="/posts/ef3998ef/"/>
      <url>/posts/ef3998ef/</url>
      
        <content type="html"><![CDATA[<p>其实在2019年末Maverick发布之初就已经注意到这个博客系统了，只是因为一些原因未真正的去体验。直到近期自己对建博的需求愈来愈强烈，在尝试了各类建博方案后还是发现，Maverick仍然是离符合自己心目中博客系统最近的那一个，并且几乎全部的硬性需求均能满足。</p><p>那就不用再纠结了！</p><blockquote><p><strong>2020-08-31更新</strong>：尴尬的是，由于本人对编程并非很熟悉，在进行<a href="https://github.com/AlanDecode/Maverick">Maverick</a>个性化改造时遇到诸多困难，网络上的相关教程也较少，无奈弃之。后再次研究了下Hugo+Github Action的自动部署方案，尝试了下也并非很难，于是更换之。详见<a href="https://www.mlosun.com/posts/hugo-github-actions/">《使用Hugo+Github Actions实现自动化部署博客》</a>，Maverick仍然是一个非常优秀的产品，期待后续能够重新使用的哪一天。</p></blockquote><h2 id="为什么是Maverick？"><a href="#为什么是Maverick？" class="headerlink" title="为什么是Maverick？"></a>为什么是Maverick？</h2><p>触网十余年，作为一个“非程序员”也沾染了不少“程序员”才具备的偏好，对博客系统的基础要求是简洁、灵活、数据安全。</p><h3 id="简洁"><a href="#简洁" class="headerlink" title="简洁"></a>简洁</h3><p>最初接触博客源于2010年，那会基本上是WordPress 和 ZBlog的天下，后来发现php语言更为流行之后，先后尝试过typehco、emlog等一系列优秀的博客系统。</p><p>直到后来接触到了github，hexo、hugo这些静态博客逐渐映入眼帘。无需操心复杂的环境（php、mysql等等）、无需操心每年的服务器续费等问题，只需要将生成的静态文件上传，绑定域名，即可迅速搭建起自己的博客。</p><p>但让我痛苦的是仍然需要在本地安装各类服务（Node.js、Go等等）、输入各种命令，作为一个“非程序员”每次折腾这些都痛苦的要死，自动化部署是个好东西。</p><p>当然网络上也有很多hexo+Travis CI的静态博客自动化部署的方案，但深受All in One“毒害”的我不也是想着能少一个服务就少一个。</p><p>涉及到github静态博客配套的评论、图床、CDN加速问题也如上述一样，需要配合各类服务才能搭建一个“完整”的博客。</p><p>而Maverick这个博客系统的作者<a href="https://www.imalan.cn/">熊猫小A</a>提供了一套使用Maverick建博的<a href="https://github.com/AlanDecode/Blog-With-GitHub-Boilerplate">「非标准方法」</a>，在体验后发现，全部所用到的服务只需要github+jsDelivr+LeanCloud+域名服务商即可。</p><p>当然了，如果对访问速度没有要求jsDelivr也可以不使用，如果无需评论的话LeanCloud也可以不使用，那就只需要github+域名服务商，管理非常之简洁。</p><p>并且后期发布博客内容的过程，也非常之简洁。我只需要在github中<code>Create new file</code>，然后将在任何MD文件中的内容复制粘贴进来，调整下头部参数后提交，系统就能完成后续的一系列工作。包括了内容的生成、发布、图片的引用和统一管理，并且由于github的机制也相当于自动完成了备份的工作，包括内容与图片的备份。</p><h3 id="灵活-amp-数据安全"><a href="#灵活-amp-数据安全" class="headerlink" title="灵活 &amp; 数据安全"></a>灵活 &amp; 数据安全</h3><p>静态博客流行的是Markdown写文章，而Markdown对图片的处理一直是痛点，往往都需要准备第三方的图床来进行管理。第三方图床什么时候跑路完全不清楚，虽说也有uPic、PicGo这类优秀的客户端可以将github当作图床来管理，可还是很会很繁琐。并且在实际的写博过程中，引用其他网站的图片也会收到禁止外链等因素的干扰。</p><p>Maverick可以实现无论任何地方的图片地址（包含远程图片），系统都会在生成博客时自动的将他们复制到统一的位置，并同时修改Markdown文章里的引用链接。同时结合jsDelivr的使用也能在国内获得良好的访问速度。</p><p>除了图片，Maverick在文章内容的管理上也非常可控，在指定的路径下你可以按照各种你喜欢的方式去组织你的Markdown文件，不论是放在文件夹里还是全部列出来，不论是文件的命名是怎样，你可以通过Maverick强大的配置选项去调整。</p><p>能够灵活的组织文章、图片，同时在github上使用这套系统，长久来看只需要保存好文章、图片目录以及配置文件，就可以让自己的数据变得很安全。</p><p>当然在数据安全上，你也可以使用将仓库同步到本地、同步到其他的git托管平台以达到多地备份的目的，让数据更可控。</p><p>另外关于生成器和主题，这两类文件是经常需要升级的。当生成器、主题、文章和图片文件全部混在一个目录下时，时间久了就弄不清楚了。通过git的子模块功能，你可以引入作者的生成器和主题仓库，来作为自己博客仓库下的一个子模块，必要时输入升级命令即可，主题文件也支持放在任何路径之下，非常灵活。</p><h2 id="如何安装Maverick？"><a href="#如何安装Maverick？" class="headerlink" title="如何安装Maverick？"></a>如何安装Maverick？</h2><h3 id="示例仓库"><a href="#示例仓库" class="headerlink" title="示例仓库"></a>示例仓库</h3><p>前面提到，Maverick系统的作者提供了一套方便的<a href="https://github.com/AlanDecode/Blog-With-GitHub-Boilerplate">「非标准方法」</a>，可以参照这套方法来快速搭建自己的博客。</p><p>在这里，我将根据自己的需求并结合这套方法搭建博客的过程记录下来，关于作者的原始教程可以参照上面的文章。</p><h3 id="Fork-amp-Tokens-amp-自动化部署"><a href="#Fork-amp-Tokens-amp-自动化部署" class="headerlink" title="Fork &amp; Tokens &amp; 自动化部署"></a>Fork &amp; Tokens &amp; 自动化部署</h3><ol><li><p><strong>Fork作者提供的示例仓库</strong><br><a href="https://github.com/AlanDecode/Blog-With-GitHub-Boilerplate">https://github.com/AlanDecode/Blog-With-GitHub-Boilerplate</a></p></li><li><p><strong>为仓库开启 Pages 服务</strong><br>进入Fork的仓库，在Settings - GitHub Pages 中将发布来源设置为gh-pages branch，稍等片刻你就可以通过类似 https:&#x2F;&#x2F;&lt;用户名&gt;.github.io&#x2F;Blog-With-GitHub-Boilerplate 这样的链接访问你的网站了。</p></li><li><p><strong>为仓库添加一个 token</strong><br>点击<a href="https://github.com/settings/tokens">这个网址</a>，创建一个token并勾选repo复选框，新的token会显示出来，把它复制下来，保存好。关了这个页面你就永远也看不到它了。<br>回到Fork的仓库中，在Settings - Secrets 中，新建一个名叫 <code>PERSONAL_TOKEN</code> 的 secret，填入刚刚生成的token</p></li><li><p><strong>开启Github Actions自动化部署</strong><br>新Fork的仓库需要手动打开Actions，点击仓库顶部的 Actions 按钮，如果出现了以下提示，点击 “I understand my workflows, go ahead and run them”.</p></li></ol><p>好，到这里，一些关于仓库的配置就基本完成了。</p><h3 id="修改博客配置-amp-绑定域名"><a href="#修改博客配置-amp-绑定域名" class="headerlink" title="修改博客配置 &amp; 绑定域名"></a>修改博客配置 &amp; 绑定域名</h3><blockquote><p>从这里开始会对仓库的文件做一些修改，如果电脑上有安装 Git，可以把仓库 clone 到本地，完成修改后提交并 push 回去；如果没有安装，可以直接在浏览器中编辑文件。</p></blockquote><ol><li>绑定自有域名 &amp; 修改仓库名称<br>在域名服务商将域名CNAME解析为<code>&lt;用户名&gt;.github.io</code>，回到仓库在src&#x2F;static文件夹中添加一个名叫CNAME的文件，内容填自己的域名，在<code>conf.py</code>中修改<code>site_prefix</code> 为 <code>/</code></li></ol><p>仓库名称任意修改即可。</p><ol start="2"><li>其他配置的修改<br>网站标题、描述、关键字、链接等设置均可参照<a href="https://github.com/AlanDecode/Maverick/blob/master/README-zh_CN.md#configurations--%E6%9E%84%E5%BB%BA">这里</a>在<code>conf.py</code>文件中修改</li></ol><h3 id="启用自动拉取远端图片"><a href="#启用自动拉取远端图片" class="headerlink" title="启用自动拉取远端图片"></a>启用自动拉取远端图片</h3><p>在仓库<code>conf.py</code>文件中添加或修改<code>fetch_remote_imgs</code>参数为<code>Ture</code></p><p>验证方式：新发布一篇包含远程地址图片的文章，等待自动部署完成后查看图片地址是否在仓库内</p><h3 id="使用-jsDelivr-作为博客的-CDN-服务"><a href="#使用-jsDelivr-作为博客的-CDN-服务" class="headerlink" title="使用 jsDelivr 作为博客的 CDN 服务"></a>使用 jsDelivr 作为博客的 CDN 服务</h3><ul><li>在仓库<code>conf.py</code>文件中添加或修改<code>enable_jsdelivr</code>参数，如下：  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enable_jsdelivr = &#123;</span><br><span class="line">&quot;enabled&quot;: True,</span><br><span class="line">&quot;repo&quot;: &quot;&lt;你的用户名&gt;/&lt;你的仓库名&gt;@gh-pages&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>验证方式：新发布一篇包含图片的文章，等待自动部署完成后查看图片地址是否以<code>cdn.jsdelivr.net</code>开头</li></ul><h3 id="使用Valine-amp-LeanCloud作为博客的评论服务"><a href="#使用Valine-amp-LeanCloud作为博客的评论服务" class="headerlink" title="使用Valine &amp; LeanCloud作为博客的评论服务"></a>使用Valine &amp; LeanCloud作为博客的评论服务</h3><ol><li>注册一个<a href="https://www.leancloud.cn/">LeanCloud</a>账户，创建一个应用，在应用Keys中获取到AppID和AppKey</li><li>在仓库<code>conf.py</code>文件中添加或修改<code>valine</code>参数，如下： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">valine = &#123;</span><br><span class="line">&quot;enable&quot;: True,</span><br><span class="line">&quot;el&quot;: &#x27;#vcomments&#x27;,</span><br><span class="line">&quot;appId&quot;: &quot;&lt;获取到的AppID&gt;&quot;,</span><br><span class="line">&quot;appKey&quot;: &quot;&lt;获取到的AppKey&gt;&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>验证方式：任意打开一篇文章测试评论即可</li></ul><h2 id="如何使用Maverick？"><a href="#如何使用Maverick？" class="headerlink" title="如何使用Maverick？"></a>如何使用Maverick？</h2><h3 id="在本地进行创作和维护"><a href="#在本地进行创作和维护" class="headerlink" title="在本地进行创作和维护"></a>在本地进行创作和维护</h3><p>我使用<a href="https://desktop.github.com/">Github Desktop</a>管理Github的仓库，安装好后clone仓库到本地文件夹</p><p>记得在clone完毕后会询问你本地推送到哪里，选择“For my own purposes”（因为是fork的仓库，所以会提示这个问题）</p><p>日常的操作为：通过文本编辑器编辑内容后，Github Desktop会显示改变了哪些内容，填写信息后提交，然后再推送到远端即可</p><h3 id="发布新的内容"><a href="#发布新的内容" class="headerlink" title="发布新的内容"></a>发布新的内容</h3><p>在src文件夹内新建Markdown文件，除了文章内容外也需要完善<code>frontmatter</code>(<a href="https://github.com/AlanDecode/Maverick/blob/master/README-zh_CN.md#file-arrangement-and-frontmatter">查看详细说明</a>)，示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title: 我的第一篇文章</span><br><span class="line">slug: my-first-awesome-post</span><br><span class="line">date: 2019-12-17 20:34</span><br><span class="line">status: publish</span><br><span class="line">author: &lt;填写你的名字&gt;</span><br><span class="line">categories: </span><br><span class="line">  - 默认分类</span><br><span class="line">tags: </span><br><span class="line">  - 博客</span><br><span class="line">  - GitHub</span><br><span class="line">excerpt: Hello World!</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">这是我的第一篇文章。文章使用 GitHub 管理，并通过 GitHub Actions 自动构建与发布！</span><br></pre></td></tr></table></figure><h3 id="升级生成器和主题"><a href="#升级生成器和主题" class="headerlink" title="升级生成器和主题"></a>升级生成器和主题</h3><p>如果你的电脑上有安装<code>make</code>，这个过程可以方便很多，在仓库文件夹内进入终端，输入如下命令：</p><ul><li>升级Maverick：<code>make mvrk</code></li><li>升级主题：<code>make theme</code></li></ul><p>关于<code>make</code>命令的详细内容可以参考仓库内的<code>Makefile</code>文件</p><h3 id="数据清理与备份"><a href="#数据清理与备份" class="headerlink" title="数据清理与备份"></a>数据清理与备份</h3><blockquote><p>以下默认为source分支</p></blockquote><ul><li>以下文件或文件夹我用不着，可以清理或修改<ul><li>assets文件夹</li><li>About-User-Pages.md</li><li>update_site.bat</li><li>update_site.sh</li><li>README.md（当然这个文件一般github仓库也都会保留些内容）</li></ul></li><li>以下文件或文件夹是你的文章及图片的重要数据，需做好备份，当然也不能清理<ul><li>src文件夹</li><li>gh-pages分支下的archives&#x2F;assets文件夹</li></ul></li><li>以下文件或文件夹是Maverick的重要组成部分，使用Maverick的话请勿清理<ul><li>Galileo文件夹（主题子模块，<a href="https://github.com/AlanDecode/Maverick-Theme-Galileo">原地址</a>）</li><li>Maverick文件夹（生成器子模块，<a href="https://github.com/AlanDecode/Maverick">原地址</a>）</li><li>conf.py（主要的配置文件）</li><li>Makefile（不使用make的话也可以清理）</li><li>.github&#x2F;workflows&#x2F;ci.yml（Github Action自动化部署）</li><li>.gitmodules（主题和生成器的子模块配置）</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.imalan.cn/archives/blog-now-powered-by-maverick/">Maverick发布博文</a></li><li><a href="https://github.com/AlanDecode/Maverick">Maverick仓库主页</a></li><li><a href="https://github.com/AlanDecode/Maverick/blob/master/README-zh_CN.md">Maverick使用文档</a>（中文）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 博客 </tag>
            
            <tag> Maverick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的写博工作流：编辑器、图片上传与图床服务</title>
      <link href="/posts/d5fee51c/"/>
      <url>/posts/d5fee51c/</url>
      
        <content type="html"><![CDATA[<p>我使用<a href="http://typecho.org/">Typehco</a>搭建博客，这是一个支持Markdown语言且开源的博客程序。就如同官网上所介绍的一样:<strong>轻量高效</strong>、<strong>先进稳定</strong>、<strong>简洁友好</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151742756.jpg"></p><p>为了让自己将精力集中在「写博」本身，同时也为了有一个「优雅」的写作体验。在使用Markdown语言来撰写文章的前提下，编辑器与图片问题的解决就成了相对复杂一些的事情。</p><p>在搜寻了一番后，我所选取的组合是:<strong>Typora + uPic + 七牛云</strong>。选择这个方案的原因有以下几点:</p><ul><li>低成本，目前其实是零成本</li><li>够优雅，使用过程顺畅便捷</li><li>私有化，数据都是自己的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151742346.jpg"></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>Typora：「<a href="https://www.typora.io/">官网</a>」「<a href="https://sspai.com/post/54912">Typora 完全使用详解</a>」</p><p>uPic：「<a href="https://blog.svend.cc/upic/">官网</a>」「<a href="https://github.com/gee1k/uPic">Github</a>」「<a href="https://sspai.com/post/55933">uPic：支持自定义，一款免费而强大的Mac图床客户端</a>」</p><p>七牛云：「<a href="https://www.qiniu.com/">官网</a>」「<a href="https://www.qiniu.com/products/kodo">对象存储</a>」</p><h2 id="低成本"><a href="#低成本" class="headerlink" title="低成本"></a>低成本</h2><p>博客目前并不是「开源」的工具，所以还是需要适当的进行「节流」。在确保<strong>服务可靠</strong>及<strong>体验优雅</strong>的前提下，成本自然是越低越好。<strong>Typora目前仍在测试期间，全部功能可免费使用</strong>；<strong>uPic则是作者开源在Github上了，也可免费使用</strong>。这里唯一值得说一说的是七牛云的对象存储。</p><p>七牛云很友好的对实名认证过的用户<strong>提供了10G的对象存储额度</strong>，具体的信息与超出后的资费可以在「<a href="https://www.qiniu.com/prices?source=kodo">产品价格</a>」这里看到。这个额度对于一般的个人博客也是足够了的，所以在初期使用七牛云是一个几乎零成本的方式。只是有两个地方需要注意以下：</p><p>一个是<strong>测试域名的问题</strong>。七牛云对自动生成的七牛系列域名定义为测试域名，同时测试域名超过30个自然日也将被系统收回，无法作为长期图床使用，详见「<a href="https://developer.qiniu.com/fusion/kb/1319/test-domain-access-restriction-rules">测试域名使用规范</a>」。这个解决方案是绑定自己的已备案域名。我的博客建立在阿里云上，原本也是需要备案的，分出一个二级域名也并没有增加额外的成本。况且现在在阿里云上进行域名备案也非常的便捷，只是时间略长。</p><p>再一个是<strong>通信协议的问题</strong>，七牛云配置https访问所产生的用量并不计入免费额度，这个其实对个人博客来说也影响不大，就使用http就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151742569.jpg"></p><h2 id="够优雅"><a href="#够优雅" class="headerlink" title="够优雅"></a>够优雅</h2><h3 id="配置过程优雅"><a href="#配置过程优雅" class="headerlink" title="配置过程优雅"></a>配置过程优雅</h3><ol><li><strong>七牛云的操作</strong><ul><li>在七牛云对象存储中创建公开的存储空间Bucket，命名为<code>Myname</code>；</li><li>绑定已备案过的域名<code>cdn.Mydomain.com</code>，并做好CNAME解析；</li><li>在七牛云密钥管理中获取到你的AccessKey和SecretKey；</li></ul></li><li><strong>uPic的操作</strong><ul><li>在Mac上下载并安装好uPic，打开偏好设置；</li><li>在图床中添加七牛云，并输入你的空间名、AccessKey、SecretKey以及域名信息；</li><li>保存即可；</li></ul></li><li><strong>为了增强体验，针对uPic我还做了如下配置</strong><ul><li>域名后的文件网址，我配置为<code>http://cdn.Mydomain.com/blog_image/日期-随机#shadow</code>，文件夹与文件名是为了以后方便管理，而<code>#shadow</code>的后缀则是因为我使用的博客主题，添加这个后可以自动添加阴影效果；</li><li>输出格式设置为Markdown，这样每次上传后会自动复制为Markdown格式，直接粘贴在Typora中即可，当然这里如果我需要URL或其它格式时也可以手动调整；</li><li>上传前压缩图片我暂且设置为20%，这个是因为我的博客配图大多是来自于<a href="https://www.pexels.com/">Pexels</a>，而下载默认的尺寸通常比较大，20%压缩后在阅读显示上一般不会有什么问题。而如果我的配图从其他地方来的话，我会根据尺寸的大小再进行手动调整。</li></ul></li><li><strong>七牛云中一些可能会用到的配置（我并未使用）</strong><ul><li>对象存储中的图片样式，可以自动裁剪、添加水印以及自动瘦身等样式处理，如果图片格式大量保持一致时可使用</li><li>对象存储中的生命周期，可将图片定期删除或转为低频存储，这样能够降低资费，如果已超出了免费额度，不妨考虑使用</li><li>融合CDN中域名管理下的域名防盗链，如果你的图片资源被到处转载使用，很容易超出了免费额度，如果有必要也可以开启</li></ul></li></ol><h3 id="使用过程优雅"><a href="#使用过程优雅" class="headerlink" title="使用过程优雅"></a>使用过程优雅</h3><ol><li><p><strong>开始写一篇新文章</strong></p><ul><li>我会先在Typora中使用<code>#</code>系列，先列好初步的一二三级标题</li><li>然后根据标题写好主体内容，该引用的引用<code>&gt;</code>，该列表的列表<code>-</code></li><li>当然在写作的过程中，加粗<code>**</code>、链接都在同步进行<code>[]()</code></li><li>图片我会先使用一小段文字占位，说明这里添加的是什么图片</li></ul></li><li><p><strong>插入并上传图片</strong></p><ul><li>主体完成后，我会整体浏览一遍，并准备好图片下载到本地</li><li>根据全文的顺序，逐个将图片拖到菜单栏上uPic图标处上传并替换文章中的占位文字</li><li>复制全文（Typora可设置直接复制为Markdown源码），并粘贴至博客后台，补充标题、标签、分类、主图等其他信息后发布</li></ul></li><li><p><strong>本地「修改」与「锁住」文章</strong></p><ul><li>当发现已发布的文章需要修改时，我会先修改本地Typora中的内容，再复制粘贴至线上，手动同步</li><li>当内容无误暂时不需要修改时，我会锁定本地Typora中的文章，并移动到「已发布」文件夹下，避免误操作，需要修改时再开启即可</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151742759.jpg"></p><h2 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h2><p><strong>数据内容的私有化是我目前使用各类应用和服务的一个基本考虑点。</strong>从过去数年中，发生了无数优秀的互联网产品关闭服务的例子。历史的教训告诉我，随着互联网自身的发展，任何互联网产品都是有可能消亡的，大厂也不例外。对于一些想要长久使用的东西，当你用了「网络服务」亦或者「本地工具」后，一定要考虑如何离开的事情。</p><blockquote><p>无论是网络服务还是本地应用，能不强依赖其自身，能够适用于互联网的基础设施，才是我所信赖的。</p></blockquote><p>uPic其实不用多说，本身只是一个上传工具，只是能较为方便的配置上传目录和后缀，这个很多同类产品也支持，甚至于<strong>我手动也可以实现</strong>。</p><p>而选择的Typora，是因为它<strong>足够纯粹</strong>，并没有这样那样的云服务、文件管理机制，只是将内容直接存储为一个个的MD文件，并使用操作系统本身的文件管理建立文件夹进行分类。我可以自由的复制、剪切、同步等操作，无需考虑在不同的Markdown之间的适应性问题。这个是我所信赖的。</p><p>而选择七牛云，确切的说是<strong>先选择了对象存储</strong>，又因为成本的原因使用了七牛云。对象存储在我理解来其实就是互联网的基础设施「服务器」-「云服务器」-「用于对象存储的云服务器」的演变。这样理解虽然不一定准确，但支持内容迁移和批量导出让我放宽了一些心。</p><p><a href="https://developer.qiniu.com/kodo/kb/3744/batch-download-and-backup-space">《七牛云对象存储的批量下载与空间备份》</a></p><p><a href="https://help.aliyun.com/document_detail/95236.html">《七牛云对象存储中的数据迁移至阿里云对象存储OSS》</a></p><p>再加上，七牛云对象存储「强制」绑定域名其实也挺好，我可以将图片或其他下载资源统统的使用<code>cdn.Mydomain.com</code>来访问，这样当我未来从七牛云对象存储迁移到阿里云对象存储时，甚至于一个个普普通通的云服务器时，所有<strong>发布在博客内的图片链接都不需要更换</strong>。也降低了未来可能的迁移成本。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151743926.jpg"></p><h2 id="两个不重要的小事情"><a href="#两个不重要的小事情" class="headerlink" title="两个不重要的小事情"></a>两个不重要的小事情</h2><ul><li>七牛云对象存储内的内容，为了方便以后的管理，我使用文件夹（文件前缀）进行简单的区分，具体的规则是<ul><li>博客主题所用的图片放在<code>blog_theme</code>下</li><li>博客文章所用的图片放在<code>blog_image</code>下</li><li>博客下载所用的文件放在<code>blog_file</code>下</li></ul></li><li>有一个用于七牛云的小工具<a href="https://github.com/LanceGin/QBox">QBox</a>，<a href="https://apps.apple.com/cn/app/qbox-%E4%BE%BF%E6%90%BA%E7%9A%84%E4%B8%83%E7%89%9B%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/id1267204866?mt=12">Mac App Store</a>也可以下载到，能够简单管理的不同存储空间，也可以批量下载文件。但作者已许久未更新，不知能不能长期使用。</li></ul><p>以上，就是我选择编辑器、图片上传与图床服务的原因以及使用方法。不知能否帮到你？</p>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新生儿建立睡眠规律的实践与心得</title>
      <link href="/posts/7e01bf5a/"/>
      <url>/posts/7e01bf5a/</url>
      
        <content type="html"><![CDATA[<blockquote><p>6月底自家宝宝出生后，在经历过无数新生儿常见的折腾后，终于随着7月底月嫂阿姨的离开，正式进入了亲自带娃的阶段。其中最痛苦的莫过于哄睡。都知道<strong>宝宝在前几个月需要每天有较长睡眠来保障大脑的发育</strong>，但随着月嫂阿姨的离开，如何让宝宝白天能多睡一会成为了全家的难题。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151738183.jpg"></p><p>因为白天我需要上班，宝宝在家里主要就宝妈和外公外婆来带。宝妈虽已出了月子但仍比较虚弱，外公外婆所能采取的方式也只有抱，一直抱。以至于后来白天10多个小时的时间内需要外婆、外公、宝妈轮流抱哄。哪怕在怀里睡着了也不敢放下，否则马上闹给你看。那会<strong>真的是对规律睡眠极度的渴望</strong>。</p><p>为此我也看了无数的文章，加上与宝妈的各种试验与探讨。后在8月初逐渐总结出基于「EASY模式」的一套白天带娃的基本流程，并打印出来贴在家里用做白天带娃的指导。经过<strong>近1个月时间的「极宽松」的实践</strong>，目前宝宝的作息已经相对规律一些了，算是有些小小的成就感。</p><p>注:以下情况发生在宝宝1.5月龄-2.5月龄期间，奶粉喂养为主的宝宝。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151738629.jpg"></p><h2 id="实践前后"><a href="#实践前后" class="headerlink" title="实践前后"></a>实践前后</h2><table><thead><tr><th></th><th>实践前（8月初）</th><th>实践后（8月末）</th></tr></thead><tbody><tr><td>饮食情况</td><td>奶粉为主，母乳3-4天1餐</td><td>奶粉为主，母乳1-2天1餐</td></tr><tr><td>排便情况</td><td>小便正常，大便3-5天1次</td><td>小便正常，大便1-2天2次</td></tr><tr><td>白天情况</td><td>抱，一直抱，轮流抱，睡着了也抱</td><td>2次0.5小时觉，1次2小时觉</td></tr><tr><td>夜间情况</td><td>无固定起睡时间，3-4次夜奶</td><td>固定起睡和夜奶时间，2次夜奶</td></tr></tbody></table><h2 id="EASY模式"><a href="#EASY模式" class="headerlink" title="EASY模式"></a>EASY模式</h2><blockquote><p>EASY模式出自于《实用程序育儿法》，它是宝宝规律作息的一套程序，每个字母代表一个意思：宝宝吃（Eat），玩一会（Activity），去睡觉（Sleep），然后妈妈就有一些自己的时间（You）。这样白天会有重复的好几轮EASY，直到晚上睡觉。如果宝宝晚上还需要夜奶，喂好就让宝宝继续睡，不需要进行EASY。</p></blockquote><p>这是很多地方对EASY模式一种解释，网上信息也很多，但我具体的实践还是需要单独说明一下。</p><p>因为我家宝是奶粉为主，所以并不像纯母乳喂养一样按需即可，基本上也是按照奶粉厂商所建议的3小时左右一次喂养。所以默认我这边以3小时一个循环做EASY流程的梳理。</p><ol><li><p>当宝宝从梦中哭闹醒来，判断发现是该吃奶了后。一边宝妈双乳各亲喂5min左右(虽奶水不足，但也要保持允吸的刺激不是)，另一边开始准备冲泡奶粉并摇匀。后喂奶约20min，拍嗝10min，换纸尿裤5min。一套流程基本时间在45min左右。</p></li><li><p>吃饱喝足后，就该做做运动放放电(如夜间宝宝本身已经很困了，则需免掉此环节)。我家所采取的活动方式，比如洗澡&amp;抬头训练、做操&amp;视觉训练、床铃&amp;出门遛弯，等分成几组，在每一个EASY流程下选一组即可。避免因为过度活动导致宝宝兴奋过头难以入睡。这一套在过渡期很难有明确的时间，可能玩个一会宝宝就困了，也可能玩很久也不困。如果根据标准的3小时循环的话这部分应该在45min左右。</p></li><li><p>放电差不多后，当发现宝宝有困意时，则开始进入哄睡模式。先做「睡前仪式」，在逐步增加安抚手段，经过一段时间的摸索后，会发现宝宝对什么样的手段比较适用，这样慢慢的就能高效哄睡了，具体的哄睡会在后面详细说明。一般情况下，新生儿在白天环境下睡90min左右属比较好的情况，当然具体也取决于活动时间的长短以及其他各类因素，有时稍短稍长也不用过分担心。</p></li><li><p>当宝宝睡着后，就迎来了宝妈的欢乐时光，该吃东西去吃东西，该做运动去做运动，该刷剧的也可以去刷剧了。</p></li></ol><p>以上是EASY模式的基本流程，每天也是由数个EASY流程所组成的。耐心加上细心，慢慢的就可以规律起来了。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151739327.jpg"></p><h2 id="4S渐进哄睡法"><a href="#4S渐进哄睡法" class="headerlink" title="4S渐进哄睡法"></a>4S渐进哄睡法</h2><p>具体的哄睡，现在也有很多，但看了很多内容加上自己的实践，发现4S渐进哄睡法是<strong>比较科学并且行之有效的方案</strong>。</p><blockquote><p>4S渐进哄睡法分别是：Setting the stage 布置环境、Swaddling 包裹、Sitting 静坐、Shush pat 嘘拍。</p></blockquote><p>4S渐进哄睡法的本质，是通过模拟宝宝在子宫内的情况，逐步建立睡眠反射，让宝宝能快速的进入强安全感的睡眠状态。</p><ol><li><p><strong>「Setting the stage 布置环境」</strong>我家宝是在卧室里有固定的睡觉小床，每次睡觉前拉上窗帘，关掉大灯，铺好小床，为<strong>他营造一个安静的暗光线环境</strong>。宝宝在子宫内的时候基本是全黑的，所以自从宝宝出生了后，卧室里夜晚基本上就没开过吊顶灯了，由最初的只开小夜灯换成大夜灯，同时会在宝宝小床旁边搭毯子遮光，有条件也可以为宝宝做单独的遮光帘。</p></li><li><p><strong>「Swaddling 包裹」</strong>未出生时宝宝是被子宫紧紧的包裹起来的，会比较有安全感。因为裹襁褓相对比较麻烦，所以我们专门买了<strong>「投降式睡袋」</strong>，也是专门给新生儿宝宝的睡袋，以此来替代襁褓给予的包裹感。同时惊跳反应其中有一个原因是，宝宝并不知道手和脚是自己身体的一部分，所以当手脚乱动时会吓自己一跳，用「投降式睡袋」也能很好的解决这个问题。</p></li><li><p><strong>「Sitting 静坐」</strong>很多老人家在哄睡宝宝时喜欢来回走动，确实宝宝在子宫内时也比较喜欢这种环境，而且传统的摇床哄睡也是这个原因。但是为了培养宝宝长期的自主入睡习惯，还是静坐会好一些。当然静坐也是比较理想的状况，如果宝宝哭闹比较厉害也可以抱起来适当走动，但随着宝宝情绪的平稳，步伐力度都可以逐渐放缓，最后轻轻坐下。静坐的过程也是<strong>帮助宝宝学会酝酿睡眠情绪</strong>。</p></li><li><p><strong>「Shush pat 嘘拍」</strong>嘘拍法的原理是，在这个阶段<strong>宝宝是很难将注意力放在3个地方</strong>的。所以发出长嘘声以及轻拍吸引了注意力后，宝宝就无法再集中精力哭闹了。只是需要注意两点，一个是如果宝宝放床后很快闭眼睛安静睡觉了，也没必要嘘拍；再一个是当哭闹嘘拍平静后，也需要持续嘘拍7-10分钟，直至宝宝睡着且嘘拍要逐渐放缓停止。</p></li></ol><p>在此基础之上，我自己也添加了两个哄睡流程到这里:</p><ul><li><strong>飞机抱&#x2F;竖抱</strong>-适用于宝宝肠绞痛引起的一直哭闹，这种哭闹再怎么安抚也无用，只能尽量去减少他的疼痛感，飞机抱&#x2F;竖抱就属于此类，后面针对肠绞痛也会单独说下</li><li><strong>抱起放下法</strong>-适用于长时间嘘拍无效宝宝开始烦躁了，就换抱起这个较大的动作来转移宝宝的视线，一旦情绪平稳了就马上放回小床，反复几次后一般都能解决问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151739376.jpg"></p><h2 id="实践方法"><a href="#实践方法" class="headerlink" title="实践方法"></a>实践方法</h2><p>前面都是理论，但在具体实践时还是有一些需要注意的，这里将各种心得也列举一下。</p><h3 id="哭闹的原因"><a href="#哭闹的原因" class="headerlink" title="哭闹的原因"></a>哭闹的原因</h3><p>在先不考虑生病的情况下，新生儿常见的哭闹原因主要有4种：</p><ol><li><p>饿了。一般哭闹后看下时间，如果距离上次吃奶的时间差不多了，再加上宝宝的嘴巴有允吸的动作时，就可判断为饿了。这种哭闹没什么好说的，喂奶就是了。</p></li><li><p>大小便未及时处理。一两次小便一般不会哭闹，除非纸尿裤很久没换，导致小便很满了，这时候宝宝会觉得很不舒服，所以我家一般是每次喂奶时都会换个新的，这样<strong>宝宝屁屁干爽也更容易入睡些</strong>。大便一般及时处理就好，新生儿大便呈金黄色糊状是最好的，所以清理时注意下皮肤褶皱的夹缝里。</p></li><li><p>肠绞痛或肠胀气。这个是新生儿常见的，因为肠胃发育还不完善，吃奶时也容易吸进空气。目前有效的手段有三个</p><ul><li><strong>防患于未然的</strong>，喂奶时注意尽量不要让吸进空气</li><li><strong>锻炼肠胃蠕动的</strong>，经常顺时针按摩小肚子，以及排气操</li><li><strong>哭闹太厉害应急的</strong>，竖抱或者飞机抱，原理是这样胃里的奶不易回流至食管，降低胃酸的灼烧痛感</li></ul></li><li><p>困过头开始烦躁了。没错，因为<strong>新生儿对自主进入睡眠状态还不是很熟练</strong>，需要一些辅助手段。而困很久了还睡不着，就会很烦躁。这种情况下需要使用各种安抚手段逐步进行，一旦宝宝情绪稳定下来了，就及时进入睡眠程序。</p></li></ol><h3 id="睡觉的时机"><a href="#睡觉的时机" class="headerlink" title="睡觉的时机"></a>睡觉的时机</h3><p>我自己的理念是，<strong>在照顾新生儿的时候，不要「让」宝宝去睡觉，而是应该「帮助」宝宝去睡觉。</strong>虽说有EASY模式，也有4S渐进哄睡法，但在宝宝不困的时候「硬逼」着去睡，只会让过程很痛苦。所以当发现宝宝表现出睡眠信号的时候，再帮助他制造好的睡眠环境，使用一些手段增强安全感，这样慢慢的宝宝就会自主入睡了。如果发现宝宝频繁的<strong>揉眼睛、打哈欠、伸懒腰、眼睛半闭时</strong>，这就是很典型的睡眠信号了。在这里也不要拘泥于时间到没到之类的，抓紧进入睡眠程序吧。</p><h3 id="接觉与干预"><a href="#接觉与干预" class="headerlink" title="接觉与干预"></a>接觉与干预</h3><p>这个是目前我家还在逐步实践的阶段。因为新生儿惊跳反应的情况在，大部分宝宝睡觉都很难达到理想的程度(白天理想的程度是1.5小时，夜间3小时以上)，所以需要接觉。</p><p>当宝宝睡觉途中醒来，开始哼唧哼唧，尚未到哭闹的情况时，大人什么时候介入干预，这里有两种说法:</p><ul><li>尽量晚的人工干预，大部分情况下宝宝是可以自己重新入睡，干预过早容易让宝宝对安抚手段依赖性较强</li><li>尽量早的人工干预，这样宝宝会更有安全感</li></ul><p>这两种方式其实都对，目前我家采取的方式是，哼唧哼唧一会后如没停止，那么就去小床边观察一下如果眼睛已经睁开。那就人工介入干预吧。大家可以根据自己的教育理念去把握尺度。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151739895.jpg"></p><h2 id="打印版"><a href="#打印版" class="headerlink" title="打印版"></a>打印版</h2><p>最后，针对以上内容自己之前也整理了一张流程图，并打印出来贴在家里，以方便自己不在家时，指导宝妈和外婆带娃。也分享出来。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151739540.png"></p><p>祝愿每个宝爸宝妈都能有个好好睡觉的天使宝宝吧！</p>]]></content>
      
      
      <categories>
          
          <category> 养猴子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 育儿 </tag>
            
            <tag> 新生儿 </tag>
            
            <tag> 睡眠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客折腾记</title>
      <link href="/posts/26d2d181/"/>
      <url>/posts/26d2d181/</url>
      
        <content type="html"><![CDATA[<p>昨天安装好了Hexo博客，按照自己的习惯总要折腾一番。使用了Pacman主题，在此记录下过程~<br>完成后的预览 <a href="http://mlosun.com/">http://mlosun.com</a></p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151737995.jpg"></p><h2 id="使用的主题和插件"><a href="#使用的主题和插件" class="headerlink" title="使用的主题和插件"></a>使用的主题和插件</h2><h3 id="Pacman主题"><a href="#Pacman主题" class="headerlink" title="Pacman主题"></a>Pacman主题</h3><p>作者博客：<a href="http://yangjian.me/">http://yangjian.me</a></p><p>介绍链接：<a href="http://yangjian.me/workspace/introducing-pacman-theme/">http://yangjian.me/workspace/introducing-pacman-theme/</a></p><p>Github地址：<a href="https://github.com/A-limon/pacman">https://github.com/A-limon/pacman</a></p><p>Demo地址：<a href="http://yangjian.me/pacman/">http://yangjian.me/pacman/</a></p><h3 id="RSS插件"><a href="#RSS插件" class="headerlink" title="RSS插件"></a>RSS插件</h3><p>hexo-generator-feed ：<a href="https://github.com/hexojs/hexo-generator-feed">https://github.com/hexojs/hexo-generator-feed</a></p><h3 id="Sitmap插件"><a href="#Sitmap插件" class="headerlink" title="Sitmap插件"></a>Sitmap插件</h3><p>hexo-generator-sitemap ：<a href="https://github.com/hexojs/hexo-generator-sitemap">https://github.com/hexojs/hexo-generator-sitemap</a></p><h2 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>未特殊说明的情况下，下述的Git bash命令均在E:\MyWork\hexo目录下执行</li><li>Hexo版本：2.5.6 Pacman主题版本：1.1</li></ul><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>执行命令下载到本地。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/A-limon/pacman.git themes/pacman</span><br></pre></td></tr></table></figure><p>修改博客根目录下的<code>_config.yml</code>配置文件中的<code>theme</code>属性，将其设置为<code>pacman</code>。同时设置<code>stylus</code>属性中的<code>compress</code>值为<code>true</code>，进行启用主题。</p><p>执行命令确认安装成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="修改头像"><a href="#修改头像" class="headerlink" title="修改头像"></a>修改头像</h3><p>主题最下方默认的是小黄人的头像，找到<code>\themes\pacman\source\img\author.jpg</code></p><p>将自己的头像改为同样的220x220，更换之~</p><h3 id="添加RSS和Sitemap功能"><a href="#添加RSS和Sitemap功能" class="headerlink" title="添加RSS和Sitemap功能"></a>添加RSS和Sitemap功能</h3><ul><li>安装RSS和Sitmap插件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br><span class="line">npm install hexo-generator-sitemap</span><br></pre></td></tr></table></figure><ul><li>配置插件：编辑<code>_config.yml</code>文件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//在</span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span><br><span class="line">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span><br><span class="line">//下添加</span><br><span class="line">plugins: - hexo-generator-feed</span><br><span class="line">plugins: - hexo-generator-sitemap</span><br></pre></td></tr></table></figure><ul><li>主题配置：编辑<code>themes\pacman\_config.yml</code>文件：<code>rss: /atom.xml</code></li><li>检查：<code>hexo g </code>&#x3D;&gt;<code> hexo d</code> 后检查无误</li><li>RSS地址：<a href="http://mlosun.com/atom.xml">http://mlosun.com/atom.xml</a></li><li>Sitemap地址：<a href="http://mlosun.com/sitemap.xml">http://mlosun.com/sitemap.xml</a></li></ul><h3 id="添加分类和标签功能（tags-amp-categories）"><a href="#添加分类和标签功能（tags-amp-categories）" class="headerlink" title="添加分类和标签功能（tags&amp;categories）"></a>添加分类和标签功能（tags&amp;categories）</h3><ul><li>在博客目录下的source文件夹分别建立tags和categories文件夹每个文件夹中分别包含一个<code>index.md</code>文件。内容为：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: tags (或categories)</span><br><span class="line">title: tags (或categories)</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ul><li>编辑之前的博文（<code>source\_posts</code>目录下），添加<code>tags</code>和<code>categories</code>参数，标签多余一项时使用<code>[标签1,标签2]</code>格式</li><li>检查：<code>hexo g</code> &#x3D;&gt; <code>hexo d</code> 后检查无误<ul><li>分类路径：<a href="http://mlosun.com/categories/%E5%88%86%E7%B1%BB%E5%90%8D">http://mlosun.com/categories/分类名</a></li><li>标签路径：<a href="http://mlosun.com/tags/%E6%A0%87%E7%AD%BE%E5%90%8D">http://mlosun.com/tags/标签名</a></li></ul></li></ul><h3 id="添加“about”页面"><a href="#添加“about”页面" class="headerlink" title="添加“about”页面"></a>添加“about”页面</h3><ul><li>编辑<code>themes\pacman\_config.yml</code>的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">    首页: /</span><br><span class="line">    关于: /about</span><br><span class="line">    归档: /archives</span><br></pre></td></tr></table></figure><ul><li>在Hexo的<code>source</code>文件夹下新建<code>about</code>的文件夹，并添加<code>index.md</code>，内容为：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">layout: page</span><br><span class="line">title: about</span><br><span class="line">---</span><br><span class="line">下面写内容</span><br></pre></td></tr></table></figure><p>欢迎指正！</p>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub for Windows的安装与配置</title>
      <link href="/posts/562a5dc0/"/>
      <url>/posts/562a5dc0/</url>
      
        <content type="html"><![CDATA[<p>初接触git，看了很多<code>msysgit</code>的使用教程，对于没太接触过相关内容的我深感糊涂。虽然最后也能使用<a href="http://git-scm.com/">git</a>配合<a href="https://github.com/">GitHub</a>进行简单的操作，但还是感到过程对于我来说甚是麻烦。</p><p>突然不小心发现了GitHub有Windows客户端，顿时感觉被解放了。下载之看了一些教程，感觉蛮舒服的。那么就在这里汇总和验证下安装和配置的过程当作教程好了。</p><h2 id="Setup-1-下载安装"><a href="#Setup-1-下载安装" class="headerlink" title="Setup.1 下载安装"></a>Setup.1 下载安装</h2><p>为什么下载安装还需要单独说明？因为习惯firefox和chrome配合使用的我开始就是卡在这一步了。</p><ol><li><p>使用浏览器打开 <a href="https://windows.github.com/">https://windows.github.com/</a> 后点击Download按钮，会下载一个<code>GitHubSetup.exe</code>文件，双击该文件。</p></li><li><p>双击后会发现安装出错，别着急，这是正常现象，点击<code>Details</code>按钮出现下图所示：<br><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151735086.jpg"></p></li><li><p>复制其中的<code>http://github-windows.s3.amazonaws.com/GitHub.application</code>，使用IE浏览器打开此链接，无法打开的请自行科学上网。<br> <strong>直接忽略前两步从此处开始也可。 这里切记使用的浏览器一定要是IE，如果使用firefox或者chrome会导致直接用内置下载器下载该文件，但这不是我们所想要的。</strong></p></li><li><p>很快就出现了安装界面，如下图：<br><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151735211.jpg"></p></li><li><p>点击安装，等待下载与安装。</p></li><li><p>剩余的时间，静静等待进度条到达100%即可安装成功（下载服务器在国外，略慢）</p></li><li><p>等待安装结束后会自动打开GitHub for Windows的登陆界面，如下：<br><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151735102.jpg"></p></li><li><p>输入Username or Email 以及 Password进行登陆就ok了</p></li></ol><h2 id="Setup-2-基础配置"><a href="#Setup-2-基础配置" class="headerlink" title="Setup.2 基础配置"></a>Setup.2 基础配置</h2><p>好了，接下来说一说该如何使用GitHub for Windows。</p><ol><li><p>登陆GitHub账号后会自动创建ssh的密钥并且在GitHub的web端配置好，需要做的仅仅是点击中上方的tools &#x3D;&#x3D;&#x3D;&gt; Options 打开设置选项。<br><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151735278.jpg"></p></li><li><p>设置你的全局name和email，选择默认存储文件夹，以及默认的命令行工具。然后点击Update更新。</p></li><li><p>配置完毕后，就可以开始你的GitHub之旅了！</p></li></ol><hr><blockquote><p><strong>Do I need to install anything extra?</strong><br>GitHub for Windows includes a fully functional version of msysGit — no need to install anything extra. You can pull up a PowerShell console within the context of any repository. GitHub for Windows even includes the amazing posh-git utility for your command line pleasure.<br><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151736293.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置自己的工作环境6：使用Github+hexo搭建静态博客</title>
      <link href="/posts/93ba44ca/"/>
      <url>/posts/93ba44ca/</url>
      
        <content type="html"><![CDATA[<p>搭建一个博客和配置自己的工作环境有什么关系？</p><p>博主认为，是为了更好的进行知识系统的管理，当然你也可以说我有印象笔记等等工具。但我想说的是在互联网上混，你离得开交流与互动么？</p><p>搭建博客的程序很多，Wordpress、Zblog、jekyll、Octopress、hexo等等。前两者是传统的博客程序，需要主机有php或者asp环境支持。但后三者是静态的博客程序，任何的静态服务器都可以搭建，我们今天就用Github提供的Pages服务来部署我们的Hexo博客。</p><p><strong>Why Hexo？</strong></p><blockquote><p>不可思议的快速 ─ 只要一眨眼静态文件即生成完成 支持 Markdown<br>仅需一道指令即可部署到 GitHub Pages 和 Heroku<br>已移植 Octopress 插件 高扩展性、自订性 兼容于 Windows, Mac &amp; Linux<br>——<a href="http://zespia.tw/blog/2012/10/11/hexo-debut/">tommy351</a>（Hexo作者）</p></blockquote><p>&amp;</p><blockquote><p>易用。不仅部署简单，平时使用中仅需要<code>hexo new</code> <code>hexo generate</code> <code>hexo server</code> <code>hexo deploy</code>四个命令。<br>轻。文件少、小，易理解，方便自定义。<br>用户多。虽然赶不上Jekyll和Octopress，但遇到什么问题都能搜索到答案，或者找到同样使用hexo的用户进行参考和咨询。<br>——<a href="http://zipperary.com/2013/05/28/hexo-guide-1/">zippera</a></p></blockquote><h2 id="搭建一个本地的Hexo博客"><a href="#搭建一个本地的Hexo博客" class="headerlink" title="搭建一个本地的Hexo博客"></a>搭建一个本地的Hexo博客</h2><blockquote><p>注意：本节教程只针对Windows用户。</p></blockquote><h3 id="安装-Git-和-Node-js"><a href="#安装-Git-和-Node-js" class="headerlink" title="安装 Git 和 Node.js"></a>安装 Git 和 <a href="http://nodejs.org/">Node.js</a></h3><blockquote><p>Git 以及 TortoiseGit 的下载安装上节已经说过，这里不再重复</p></blockquote><p>Node.js的安装也十分简单，只需要在官网上点击<code>Install</code>即可自动下载安装文件并执行即可安装。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在任意位置点击鼠标右键，选择Git bash，然后输入以下命令并回车，即可安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="创建Hexo和初始化"><a href="#创建Hexo和初始化" class="headerlink" title="创建Hexo和初始化"></a>创建Hexo和初始化</h3><p>安装完成后，在你喜爱的文件夹下（我选择的是E:\MyWork\hexo），在是E:\MyWork\hexo内点击鼠标右键，选择Git bash，输入以下命令并回车，Hexo 即会自动在目标文件夹建立网站所需要的所有文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>你也可以在任意地方右键打开Git bash，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init E:\MyWork\hexo</span><br></pre></td></tr></table></figure><p>也是同样的效果（无须手动创建Hexo文件夹）</p><h3 id="搭建完成-amp-本地查看"><a href="#搭建完成-amp-本地查看" class="headerlink" title="搭建完成&amp;本地查看"></a>搭建完成&amp;本地查看</h3><p>ok，一个Hexo博客就已经在本地搭建完成了，是不是很简单？</p><p>接下来让我们在本地浏览一下Hexo博客吧，在E:\MyWork\hexo的Git bash里执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>在浏览器输入<a href="http://localhost:4000/">http://localhost:4000/</a>就可以打开了。</p><p>现在我们的Hexo博客虽然搭建好了，但只是在本地，别人可看不到，所以我们需要将博客部署到Github。</p><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><h3 id="创建Github帐户及仓库"><a href="#创建Github帐户及仓库" class="headerlink" title="创建Github帐户及仓库"></a>创建Github帐户及仓库</h3><p>注册一个<a href="http://www.github.com/">Github</a>账号，新建一个repository（仓库）。</p><blockquote><p>注意repository的命名应该是<code>mlosun.github.com</code>将mlosun替换为你的用户名。</p></blockquote><h3 id="配置Hexo博客"><a href="#配置Hexo博客" class="headerlink" title="配置Hexo博客"></a>配置Hexo博客</h3><p>编辑_config.yml(在E:\MyWork\hexo下)。你在编辑时，要把下面的mlosun都换成你的账号名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: https://github.com/mlosun/mlosun.github.com.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>编辑完保存后在E:\MyWork\hexo下执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>ok，略等10分钟（Github第一次部署网站需要10分钟配置时间）打开网址<a href="http://mlosun.github.com/">http://mlosun.github.com</a> 是不是发现你的网页已经部署上去了？</p><p>是不是很简单？</p><p>接下来再说几个要点。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>现在你可以通过<a href="http://mlosun.github.com/">http://mlosun.github.com</a>来访问你的博客，但是我们想要通过<a href="http://mlosun.com/">http://mlosun.com/</a>来访问怎么办？</p><p>在你的E:\MyWork\hexo\source创建名为<code>CNAME</code>的文件，内容里写入<code>mlosun.com</code>，保存后重新执行以下命令即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>同时把你的域名解析做CNAME解析到<code>mlosun.github.io.</code>把用户名换成你自己的</p><p>等解析生效后打开<a href="http://mlosun.com/">http://mlosun.com/</a>看看是不是成功了？</p><h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><h3 id="config-yml文件配置"><a href="#config-yml文件配置" class="headerlink" title="_config.yml文件配置"></a>_config.yml文件配置</h3><p><code>_config.yml</code>文件是Hexo博客的全局配置文件，里面每个参数都可以自行修改，具体代表的意义参考<a href="http://hexo.io/docs/configuration.html">http://hexo.io/docs/configuration.html</a></p><h3 id="发表新文章"><a href="#发表新文章" class="headerlink" title="发表新文章"></a>发表新文章</h3><p>好了，站点配置好了，我想发表一篇文章，怎么做呢？</p><ol><li><p>在E:\MyWork\hexo路径下执行命令hexo new “my new post”</p></li><li><p>在E:\MyWork\hexo\source_posts中打开这个文件，建议使用Sublime Text 2打开</p></li><li><p>文件的开头配置格式（一定要配置，不然无法生成新文章）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: my new post #可以改成中文的，如“新文章” </span><br><span class="line">date: 2014-05-06 07:56:29</span><br><span class="line">#发表日期，一般不改动 </span><br><span class="line">categories: blog #文章文类 </span><br><span class="line">tags: [博客，文章] #文章标签，多于一项时用这种格式</span><br><span class="line">---</span><br><span class="line">#这里是正文，用markdown写</span><br></pre></td></tr></table></figure><p>然后再</p><ul><li>hexo server，访问localhost:4000预览效果。（退出server用Ctrl+c）</li><li>hexo deploy，同步到github。访问网站看看效果。</li></ul><h3 id="命令格式小技巧"><a href="#命令格式小技巧" class="headerlink" title="命令格式小技巧"></a>命令格式小技巧</h3><p>hexo现在支持更加简单的命令格式了，比如：</p><ul><li>hexo g &#x3D;&#x3D; hexo generate</li><li>hexo d &#x3D;&#x3D; hexo deploy</li><li>hexo s &#x3D;&#x3D; hexo server</li><li>hexo n &#x3D;&#x3D; hexo new</li></ul><h3 id="插件与主题"><a href="#插件与主题" class="headerlink" title="插件与主题"></a>插件与主题</h3><p>插件和主题可以去<a href="https://github.com/tommy351/hexo/wiki">https://github.com/tommy351/hexo/wiki</a>这里找<br>如果有不明白的也可以给Hexo作者在Github发issues，作者是台湾人，也比较方便沟通。</p><p>ok，欢迎访问我的博客：<a href="http://mlosun.com/">http://mlosun.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> 工作环境 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置自己的工作环境5：使用Git进行工作文档的版本控制</title>
      <link href="/posts/6932f96/"/>
      <url>/posts/6932f96/</url>
      
        <content type="html"><![CDATA[<blockquote><p>其实这个系列教程的缘由就是这一篇了。<br>同时也附上参考链接<a href="http://www.cnblogs.com/dabaopku/archive/2012/01/09/2316772.html">玩转git,让git成为个人工作备份利器</a></p></blockquote><p>开始正文！</p><h2 id="Git是什么？"><a href="#Git是什么？" class="headerlink" title="Git是什么？"></a>Git是什么？</h2><p>前面说了那么多Git，但是Git到底是什么呢？<a href="http://baike.baidu.com/subview/1531489/12032478.htm">百度百科</a></p><p>在程序员的世界里Git是一款自由和开源的分布式版本控制系统。但在这里我们不能这么说，因为这个系列的文章对象并非都是程序员，哪怕你不懂任何编程甚至于电脑小白。</p><blockquote><p>Git是一款记录你工作的任何变动，并能保留每次工作结果的一款项目管理神器！</p></blockquote><p>举个例子：</p><blockquote><p>你是一个编辑，老板让你写一份产品报告，终于在2014年5月1日完成了初稿 <code>产品报告.doc</code>，然后因为这个报告比较重要，于是完善一下有了<code>产品报告0502.doc</code>。然后提交给老板，老板说这里这里不好需要修改。于是你有了<code>产品报告0503.doc</code>，后来在老板和客户的英明指导下，你有了<code>产品报告0504.doc</code>、<code>产品报告0505.doc</code>、<code>产品报告（最终版）.doc</code>、<code>产品报告（最终版）新.doc</code>、<code>产品报告（最终版）0510.doc </code>、<code>产品报告（最终版）完成版.doc </code>…..</p></blockquote><blockquote><p>到头来自己比谁都乱，每个版本都有一些资料想保留下来，但给老板和客户的又只有一份完成版。</p></blockquote><p>而使用Git，可以实现你始终只有一个<code>产品报告.doc</code>，并且每一次修改的时候都能记录下当时发生了什么事，并且每个版本都能和其他版本对比，增加了哪些内容，删减了哪些内容。并且能够随时恢复到任一版本，你的归档文件夹，始终只有这一份文档！</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们只需要两款软件</p><p>msysgit（<a href="http://git-scm.com/">下载</a>）（如果你懂命令行，其实只需要这一款就够了）<br>TortoiseGit（<a href="http://tortoisegit.org/">下载</a>）<br>msysgit 是Git核心的功能软件，而 TortoiseGit 是能够和Windows的资源管理器整合的图形化Git管理软件，</p><p>知道了这些，接下来你的步骤是：</p><ol><li>下载这两款软件到本地</li><li>首先安装 msysgit（顺序不要错了）</li><li>再次安装 TortoiseGit（啥，你问我安装选项？除了安装路径两个软件全部一路默认好了）</li><li>顺便下载 TortoiseGit 的中文语言包，并安装（和 TortoiseGit 下载页面在一起的，别说你找不到）</li><li>安装好后在桌面点击鼠标右键，就会出现几个程序选项，如图：<br><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151719300.png"></li><li>接下来打开 TortoiseGit &#x3D;&gt; Settings 选项，如图:<br><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151721990.png"></li><li>修改语言为中文（在桌面再次鼠标右键打开，是不是都变成中文了？）</li><li>修改Git.exe路径为你安装 msysgit 的bin文件夹</li><li>配置Git环境完毕，是不是很简单？</li></ol><h2 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h2><p>在这里，主要说3个Git要点，并且依照这3个要点的顺序讲述如何使用Git进行工作，然后在根据一个实例来说明Git的使用：</p><ul><li>基础知识</li><li>版本分支</li><li>版本对比及还原</li></ul><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>首先我们在E盘的 <code>MyWork文件夹</code> 的图标上点击鼠标右键选择“Git在这里创建版本库”，弹出的对话框不用管直接点确定（复选框不要选），随后点击ok即可。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151723198.png"></p><p>ok，一个版本库就创建出来了。刷新或重新打开E盘，你会发现文件夹上出现了一个绿色的对勾图标，说明这个文件夹已经受到了Git的版本控制。（这个图标的出现不一定实时，也许你要多刷新几次，甚至重启电脑才行）</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151724071.png"></p><blockquote><p>当你将一个文件夹使用Git创建了版本库时，会在该文件夹下出现一个叫.git的隐藏文件夹，这个也是Git控制的一些数据，如果删除该隐藏文件夹，那么所有的Git记录和数据将丢失。你可以在文件夹选项中设置不显示隐藏文件。</p></blockquote><p>常见的图标及含义如下：</p><ul><li><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151725270.png"><br>这个文件（夹）很干净，是最新版本文件</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151726121.png"><br>这个文件（夹）发生了修改，需要提交</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151726007.png"><br>这个文件（夹）要添加进版本库</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151727591.png"><br>这个文件（夹）没有在版本库中，需要添加进来（转为上一个图标的状态），或者忽略（转为下一个图标的状态）</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151727457.png"><br>这个文件（夹）被忽略，不受版本控制</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151727997.png"><br>这个文件(夹)里的内容发生冲突（这是最危险的情况，但是对于个人用户来说，几乎不会出现，出现的情况是两个人同时对一个文件做修改，后提交的人在更新时无法与前者完美融合时，这个不需要深入理解）</p></li></ul><h3 id="版本分支"><a href="#版本分支" class="headerlink" title="版本分支"></a>版本分支</h3><p>接下来说说版本分支（Branch）。</p><p>举个例子：</p><blockquote><p>你需要写一份商业策划，随后洋洋洒洒一大篇完成了这份商业策划。但突发灵感想修改一下商业策划，但又不知道是不是自己想要的，你就可以新建一个分支拷贝这份商业策划的所有资料进行修改。</p></blockquote><blockquote><p>当修改完成后如果你满意，就可以将这个分支与原来的主分支（Master）合并（Merge），甚至直接代替主分支。如果你感觉越改越糟，就直接回到主分支工作，仿佛什么也没有发生一样（当然这个新的分支要通过某些复杂的操作来删除，你也可以留着，作为自己惨痛教训的警钟）。</p></blockquote><blockquote><p>也就是说，分支为你提供了一个尝试某些新道路的空间。</p></blockquote><h3 id="版本对比及还原"><a href="#版本对比及还原" class="headerlink" title="版本对比及还原"></a>版本对比及还原</h3><p>还记得上一篇说的<code>提交commit</code>吗？</p><p>每一次工作完成之后都需要执行 <code>提交commit</code>，所以Git就能够记录每一次提交时的文档状况，并且能够和任一一次提交的版本进行详细对比，并且能够恢复到任一版本的状态。</p><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><p>我时常会使用到<code>wordpress</code>程序开发各种不同的网站，所以现在我就演示一个使用wordpress给一个朋友做摄影公司网站的项目管理案例。</p><h3 id="创建-amp-提交"><a href="#创建-amp-提交" class="headerlink" title="创建&amp;提交"></a>创建&amp;提交</h3><p>首先新建一个文件夹叫 <code>wordpress</code>，我的策略是所有基于wordpress开发的程序都在这个文件夹里完成，使用不同的分支来区分不同的网站项目。</p><p>右键将<code>wordpress</code>添加进版本库。并且添加一个文件夹叫做<code>README.md</code>，里面写上内容。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151727235.png"></p><p>右键在文件夹内空白地方点击<code>Git提交 -&gt; &quot;master&quot;</code>表示向master分支提交工作内容。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151728019.png"></p><blockquote><p>如果你第一次提交，TortoiseGit会提示你设置用户名和电子邮箱，这是因为Git可以多用户协作，填写用户名和邮箱是为了区分每次工作的提交和修改时由谁进行的。</p></blockquote><p>弹出提交窗口，填写日志及勾选变更列表后点击确定（Git强制要求你写提交日志，否则不能提交，这也是一个好习惯）</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151728282.png"></p><p>ok，提交完成后你发现<code>README.md</code>文件签名的蓝色问号已经变为绿色对号了。</p><p>再次，我们依照<code>README.md</code>里的规划，将master内的文件夹目录和内容准备好，就像平时操作文件夹一样。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151729213.png"></p><p>我做了如下事情：</p><ul><li>修改了<code>README.md</code>文件，删除了一行<code> - Vcom：公司网站项目</code></li><li>新建了 <code>WP</code> 、 <code>Theme</code> 、 <code>Plugin</code> 、 <code>Doning</code> 这几个文件夹</li><li>下载wordpress3.9版本的源码，放入 <code>WP</code>文件夹</li></ul><p>再次提交：</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151729406.png"></p><p>刷新发现 <code>Doing</code>、 <code>Plugin</code>、 <code>Theme</code> 这三个文件夹前面还是蓝色问号。这是因为Git不允许提交空的文件夹，所以新建这三个空文件夹提交不成功。我们在这三个文件夹内都添加一个README.md文档再次提交就好了。刷新看下，全绿了。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151731882.png"></p><h3 id="版本差异化对比"><a href="#版本差异化对比" class="headerlink" title="版本差异化对比"></a>版本差异化对比</h3><p>ok，现在我突然想起来，我好像改变了版本库根目录下的README.md文件，但是又记不起来改变了什么内容，怎么办?</p><p>我们在<code>README.md</code>文件上右键点击</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151731087.png"></p><p>选择“与前一版本比较差异”</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151731071.png"></p><p>我们可以看到，在有变化的地方会被高亮显示。</p><h3 id="版本还原"><a href="#版本还原" class="headerlink" title="版本还原"></a>版本还原</h3><p>考虑了一下，我们想回到之前的版本</p><p>右键选择“TortoiseGit &#x3D;&gt; 显示日志”</p><p>在日志列表选择想要恢复到的版本，右键点击看到</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151732328.png"></p><p>有两种回到之前版本的方法，Reset 和 Revert ，他们的区别在于</p><ul><li>revert 是撤销某次操作，此次操作之前的commit都会被保留</li><li>reset 是撤销某次提交，但是此次之后的修改都会被退回到暂存区</li></ul><p>在这里我们使用Revert。</p><p>点击Revert后刷新发现，怎么 <code>Doing</code>、 <code>Plugin</code>、 <code>Theme</code>这三个文件夹还在，里面的 README.md 也还在。没错，这也是Git的聪明之处。</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151732161.png"></p><p>还记得我们之前的操作吗？看上面日志信息的那张图我们发现</p><ul><li>15:05 我们提交的内容：修改README.md文件、新建wordpress文件夹并放入内容</li><li>15:11 我们提交的内容：新建 Doing、 Plugin、 Theme三个文件夹并放入文件README.md</li></ul><p>也就是说我们仅仅恢复了15:05分的操作，但15:11分的操作仍然存在。是不是很赞？<br>再次提交后我们查看日志信息</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151733389.png"></p><p>新增一次提交的日志，并且在日志说明里可以看到是Revert，下面的文件里列表双击即可打开查看这次提交都变动了什么。</p><p>下面我们将WP这个文件夹重新放入wordpress源码，并提交一次，来演示如何使用版本分支</p><h3 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h3><p>在文件夹内右键选择“TortoiseGit &#x3D;&gt; 创建分支”，取名为Moga</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151733273.png"></p><p>再次文件夹内右键选择“TortoiseGit &#x3D;&gt; 切换&#x2F;检出”，切换到Moga分支</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151733423.png"></p><p>文件没变化？是的，因为我们创建Moga分支的方法属于“克隆master主分支，并创建新分支”的方式，你也可以选择其他方式来创建分支。</p><h3 id="切换与使用分支管理文件"><a href="#切换与使用分支管理文件" class="headerlink" title="切换与使用分支管理文件"></a>切换与使用分支管理文件</h3><p>由于上面我们已经切换到Moga分支了，接下来我们的操作只对Moga分支有影响。</p><p>比如我们创建一个 <code>Moga.md</code> 文件，并提交</p><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151734068.png"></p><p>然后我们切换回master主分支出查看，并没有<code>Moga.md</code>这个文件，明白了吧！</p><blockquote><p>没错，版本分支就是这样去理解。和你复制整个版本库（包括所有的日志提交信息）没有区别。唯一不同的是你的文件夹目录结构更清爽了！</p></blockquote><p>ok，这篇耗时一下午的文章终于写完了。在以后的文章里我也会经常使用 Gif 和 TortoiseGit 。</p><p>Git还有很多的小技巧，就留给以后再说吧。</p>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作环境 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置自己的工作环境4：创建你的电子工作台</title>
      <link href="/posts/3c2a4362/"/>
      <url>/posts/3c2a4362/</url>
      
        <content type="html"><![CDATA[<p>本来准备开始写Git相关内容的，但想了想，Git毕竟是程序员世界的东西，而想要使用Git来加强工作环境还是需要先做下相应的理论准备。</p><h2 id="你见过这样的桌面吗？"><a href="#你见过这样的桌面吗？" class="headerlink" title="你见过这样的桌面吗？"></a>你见过这样的桌面吗？</h2><p><img src="https://cdn.jsdelivr.net/gh/mlosun/cdn.mlosun.com/img/202109151717292.jpg"></p><p>甚至于C盘D盘E盘也是如此，邮箱里的资料也是乱七八糟，U盘里也是东一个word西一个jpg。</p><p>这篇文章就是解决这个问题的。首先请你花上半天甚至一天的时间来跟我做（视你的凌乱程度决定）！</p><h2 id="个人管理"><a href="#个人管理" class="headerlink" title="个人管理"></a>个人管理</h2><p>若干年前我第一次听说GTD这个词的时候自己总结了一套方法论：</p><blockquote><p>个人管理&#x3D;目标管理+时间管理+知识管理+财务管理+健康管理+人际管理</p></blockquote><p>现在想想这样总结的也没错，人一辈子不就这么些事情么。但时而久之我发现，这样的总结根本无法落地。于是我决定从实际出发，抛开那些理论上所谓的“方法论”，只找适合自己的方式并归纳成为一个又一个的小系统，当时机成熟了，再去归纳为大系统。</p><p>嘿嘿，好乱。下面开始正题：</p><h2 id="选择搜集器"><a href="#选择搜集器" class="headerlink" title="选择搜集器"></a>选择搜集器</h2><p>这么多的文件和种类，想要纯粹的使用文件夹套文件夹去做分类，时间久了找文件就是一件费时间的事情。所以这里我使用以下几种搜集器来整理自己的文件（包括我的事务、金钱、想法、人际关系等）。</p><p>我主要选择了 <code>Git/印象笔记/Doit.im</code> 三个大系统，以及 <code>Quick Pop Menu/Foxmail/百度云</code> 等一些小系统来作为自己的搜集器。其中：<br>    1. Git管项目<br>    2. 印象笔记管杂事<br>    3. Doit.im管时间</p><p>这里主要说一下管理项目所需的“工作台”概念。</p><h2 id="什么是工作台"><a href="#什么是工作台" class="headerlink" title="什么是工作台"></a>什么是工作台</h2><p>我认为一个好的项目工作台需要具备以下几个条件：</p><ul><li>该项目的资源都放在一起，使用&#x2F;查询&#x2F;修改&#x2F;提交非常方便</li><li>一个项目除非终结，否则反复的修改文档及内容是非常频繁的事情，所以需要版本控制</li><li>项目的资源可随时使用，也就是同步的概念，包括家里的电脑&#x2F;办公室的电脑&#x2F;手机等</li></ul><h2 id="我的做法"><a href="#我的做法" class="headerlink" title="我的做法"></a>我的做法</h2><p>在我的电脑E盘有一个文件夹叫<code>MyWork</code>（不要使用中文和特殊字符，一些软件会不支持路径）</p><p>我将该文件夹的快捷方式发送到电脑桌面方便随时打开，目前我手头上有这么几件事情：</p><ul><li>使用wordpress给一个客户做网站</li><li>搭建自己的博客</li><li>梳理自己公司的产品介绍文档及演示图片、视频等</li></ul><p>于是我在这个 <code>MyWork</code> 的文件夹下又新建了3个文件夹，分别叫 <code>wordpress</code>、<code>blog</code>、<code>product</code></p><p>每个文件夹内都会有一个文件<code>README.md</code>，里面会写一些该项目的基本情况以及该项目文件夹内的文件结构等信息</p><ul><li>我使用Git实现项目文档的版本控制</li><li>我使用百度云实现项目的同步（也可以用其他网盘）</li></ul><p>这两个如何操作我们后续介绍。</p><p>每个项目的工作都有三种状态：ToDo &amp; Doing &amp; Done 准备做&amp;正在做&amp;已完成</p><p>另外也有两种行动：Do &amp; Commit 做&amp;提交</p><p>简单的说就是：</p><ul><li>一项工作准备做但尚未开始时是ToDo状态</li><li>你看到了（想到了）ToDo列表，于是决定要Do了，就到了Doing状态</li><li>当你做完了这件事，决定要Commit了，于是这项工作就到了Done状态</li></ul><blockquote><p>需要说明的是：</p><ul><li>列ToDo本身也是一项工作</li><li>一个项目分多项工作可以多次Commit，方便控制版本</li></ul><p>这也是Git的基础理论</p></blockquote><p>ok，理论课上到这里，下篇开始实践Git！</p>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作环境 </tag>
            
            <tag> 电子工作台 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置自己的工作环境3：Sublime Text 2 的安装与配置</title>
      <link href="/posts/e1b8bbc5/"/>
      <url>/posts/e1b8bbc5/</url>
      
        <content type="html"><![CDATA[<p>写在前面的话：</p><blockquote><p>Windows下的文本（代码）编辑器多不胜数，如Notepad++、Editplus等等。但选择哪一款在于自己的习惯，博主在这里选择的是号称性感无比的代码编辑器Sublime Text 2 （<a href="http://www.iplaysoft.com/sublimetext.html">via</a>）</p></blockquote><p>对于性感的软件，博主的定义有3：</p><ol><li>界面美观漂亮</li><li>启动&amp;操作速度顺畅</li><li>可扩展（插件及主题）</li></ol><p>很幸运的，Sublime Text 2全都符合，下面开始：</p><h2 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h2><p>Sublime Text 2 是一款商业收费软件，价格甚至高达59美刀。不过不用担心，作者很厚道的提供了免费无限制无限期的试用权，也就是说，除了偶尔（频率非常低）会弹出提示你没有购买之外，你可以永久免费的使用该软件的全功能没有任何问题。</p><p>官方下载地址：<a href="http://www.sublimetext.com/2">http://www.sublimetext.com/2 </a>（Sublime Text 3 目前还在测试版，现在推荐2）</p><p>下载完成后正常安装即可，养成修改安装路径的好习惯，我习惯安装在<code>D:\Program Files\</code> 目录下。</p><p>安装完毕后即可打开 Sublime Text 2 软件。咦，是英文界面？那就对了…</p><p>中文语言包及汉化教程下载：<a href="http://pan.baidu.com/s/1i340ikX">http://pan.baidu.com/s/1i340ikX</a></p><p>PS：这个语言包将插件翻译为了“程序包”，其实这才是最准确的，原单词为 Package 。</p><p>安装语言包后再打开，是中文了吧。安装结束，体验吧！</p><h2 id="技巧及插件"><a href="#技巧及插件" class="headerlink" title="技巧及插件"></a>技巧及插件</h2><p>这些也是 Sublime Text 2 最性感的地方了。</p><ul><li>我常用的颜色主题：Monokai</li><li>安装Package Control<ol><li><p>点击查看-显示控制台（快捷键Ctrl+&#96;）</p></li><li><p>粘贴以下代码到底部命令行并回车</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib2,os;pf=&#x27;Package Control.sublime-package&#x27;;ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),&#x27;wb&#x27;).write(urllib2.urlopen(&#x27;http://sublime.wbond.net/&#x27;+pf.replace(&#x27; &#x27;,&#x27;%20&#x27;)).read())</span><br></pre></td></tr></table></figure></li><li><p>重启Sublime Text 2</p></li><li><p>如果在Perferences-&gt;package settings中看到package control这一项，则安装成功。</p></li></ol></li><li>使用Package Control<ol><li>按下Ctrl+Shift+P调出命令面板</li><li>输入install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。</li><li>即可以在线查找及安装插件了</li></ol></li></ul><p>ok，下面开始介绍插件，由于网上存在很多的插件介绍，博主这里只介绍自己使用的一些：</p><ul><li><p>Gist：Sublime Text 2 + Gist &#x3D; 代码片段管理器（<a href="http://lucifr.com/2012/03/07/sublime-text-2-plus-gist-equal-snippet-manager/">via</a>）</p><blockquote><p>PS：原始的填入 Gist 账户名及密码来验证GitHub账户的方式已失效 （<a href="https://github.com/condemil/Gist#generating-access-token">via</a>）新的验证方式步骤如下：</p><ol><li>进入<a href="https://github.com/settings/applications">https://github.com/settings/applications</a></li><li>点击 Create New Token 创建一个新的Token，可以使用Gist for Sublime Text 2这样d描述来区分</li><li>打开 Sublime Text 2 里的Gist插件配置页面，填入token:XXXXXXXXXXXXX，保存即可</li></ol></blockquote></li><li><p>WordPress：集成一些WordPress的函数，对于像我这种经常要写WP模版和插件的人特别有用！</p></li><li><p>Markdown Preview：通过sublime text2来编辑markdown（<a href="http://www.1008a.com/post/679.html">via</a>）</p><blockquote><p>Sublime Text 2自带的主题风格中没有Markdown语法的高亮功能<br>Markdown语法高亮主题下载：<a href="http://pan.baidu.com/s/1eQoXpz8">http://pan.baidu.com/s/1eQoXpz8</a></p></blockquote></li><li><p>……先列举这么多</p></li></ul><p>ok，关于 Sublime Text 2 的介绍和使用教程到此结束！</p>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作环境 </tag>
            
            <tag> Sublime Text 2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置自己的工作环境2：重装个系统先</title>
      <link href="/posts/b2472a4e/"/>
      <url>/posts/b2472a4e/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“工欲善其事，必先利其器。居是邦也，事其大夫之贤者，友其士之仁者。” ——孔子（春秋）《论语·卫灵公》</p></blockquote><p>这可是子曰的。我现在手上有两台笔记本，一台为刚毕业时候买的老掉牙的华硕K40IE，一台为今年年初才买的ThinkPad S230U。因为有了新的本，华硕的本近期都在半闲置状态。想想也该利用起来，于是乎重装个系统先。</p><h2 id="重装系统策略"><a href="#重装系统策略" class="headerlink" title="重装系统策略"></a>重装系统策略</h2><p>重装个系统还要啥策略…好吧，我严谨过分了，不过序言部分也说过了，尽可能清楚的描述每个过程、步骤及其原理，对吧。如果熟练的，捡重点看看就好了。</p><ul><li><strong>硬盘分区</strong></li></ul><p>华硕的本硬盘总大小为320G，分为C盘50G，D盘50G，其余的均分配给E盘。C盘装系统，D盘装软件，E盘为工作或文档目录。这样的好处是再次重装系统后软件清单和文档资料都还在不需要专门备份。</p><ul><li><strong>系统版本</strong></li></ul><p>因为是老电脑，win8是不用想了，winxp虽然也ok，但毕竟微软已经停止支持了，相信很快很多软件也会不支持。所以就是win7不用选了哈哈！</p><p>硬盘分区软件：<a href="http://www.xiazaiba.com/html/1305.html">http://www.xiazaiba.com/html/1305.html</a><br>Win7Ghost下载：<a href="http://ghostwin7.com/windows7/2537.html">http://ghostwin7.com/windows7/2537.html</a><br>（上述下载源并不推荐，仅供我自己留存参考使用。）</p><h2 id="重装系统步骤"><a href="#重装系统步骤" class="headerlink" title="重装系统步骤"></a>重装系统步骤</h2><p>详见：<a href="http://www.udaxia.com/win7/">http://www.udaxia.com/win7/</a>（发现了吧，博主是很懒的。）</p><p>值得说一下的是：如果你和博主一样喜欢全格硬盘重装系统（听说这样重装的干净一些），那么在winpe后首先打开DiskGenius软件进行：（注意备份数据！）</p><ol><li>删除所有分区</li><li>快速分区（依照上述的分区策略）</li><li>格式化分区</li></ol><h2 id="Win7系统配置"><a href="#Win7系统配置" class="headerlink" title="Win7系统配置"></a>Win7系统配置</h2><p>GHost恢复完成后点击重启电脑，随后电脑会自动开启配置相关文件，注意根据屏幕右下的提示进行键盘和鼠标的操作（该提示仅博主提供的Win7Ghost才有），随后再次重启即安装成功。要让Win7系统更适合自己，还需要做以下几个步骤：</p><ol><li>开启Win7 Aero效果：打开计算机属性——给计算机性能评分，几分钟后即可开启</li><li>连接Wifi（或插上网线）：选择家庭网络，创建家庭组密码（<code>73TM6WZ7mk</code>）</li><li>该系统已将常用的文件夹放在了D盘（下载，我的文档，Favorites），根据习惯保持不变即可</li><li>删除桌面的<code>软件安装管理器（快捷方式）</code>&amp;<code>激活工具.驱动精灵（文件夹）</code>，这是该Ghost自带的一些软件安装包</li><li>安装Firefox到<code>D:\Program Files\Mozilla Firefox\</code>目录下，并设置同步</li><li>安装必备软件到<code>D:\Program Files\</code><ul><li><a href="http://www.geekuninstaller.com/">Geek Uninstaller</a>：超强力的软件卸载工具</li><li><a href="http://shurufa.qq.com/">QQ输入法</a>：卸载搜狗，登陆QQ账号，同步词库</li><li><a href="http://www.xiazaiba.com/html/170.html">CCleaner</a>：我喜欢下载吧的绿软</li><li><a href="http://pan.baidu.com/download">百度云管家</a>：据说微云近期很火，考虑更换ing</li><li>其余的软件后续使用到了再装，毕竟是备用的电脑</li></ul></li><li>使用CCleaner清理系统垃圾文件（以后也定期清理）</li><li>重启之，配置完成一个干净清爽的系统就来了~</li></ol><p>over！</p>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作环境 </tag>
            
            <tag> 重装系统 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置自己的工作环境1：序言</title>
      <link href="/posts/fd0e95b0/"/>
      <url>/posts/fd0e95b0/</url>
      
        <content type="html"><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>博主是一个很乱的人。电脑桌面、硬盘、移动硬盘；图片、视频、代码、文档；账号密码；软件配置；收集器等各种乱，一塌糊涂。</p><p>很喜欢在网上搜罗各种资料搜集整理的办法以及工作环境习惯的帖子，实践过GTD，分类过Evernote。但别人的方案对自己总有那么一些不适合，导致越来越乱。</p><p>自己不是专业的程序员，甚至于很不想给自己贴上“程序员”这个标签，只是能看懂，会写一点点代码。很无情的不得不“被程序员”了。</p><p>前几天接触到了git和github，尝试了几天，突然感觉到：可以解放大脑了！</p><p>如何解放？请看下文及后续的系列文章。</p><h1 id="什么是自己的工作环境？"><a href="#什么是自己的工作环境？" class="headerlink" title="什么是自己的工作环境？"></a>什么是自己的工作环境？</h1><p>首先是我的工作性质：</p><ul><li>我是一个小团队的主管，要涉及到财务、人事、项目、文档资料的管理</li><li>我是一个“伪码农”，但也会常写一些代码（都是很基础的html之流…）</li><li>我是一个blogger，常写一些文章，包含各个方面</li><li>我是一个“伪Geek”，或者说电脑发烧友吧，对计算机系统及软件喜欢研究和探索</li><li>我是一个“伪艺术家”，好看的图、好听的音乐、好看的视频及电影</li><li>甚至我还是一个“伪学者”，读书&amp;读书笔记，你懂的…</li><li>我还是一个…</li></ul><p>好吧，真当在写东西的时候才发现自己挺全能的（又在臭屁了…），转回正题，虽然说git和github都是程序员世界的东西，但所谓“本质是相通的”，所以就有了下面这句话：</p><blockquote><p>无论生活与工作，你都需要让自己始终保持一个有条理清晰状态，这样才能提高工作效率享受优雅生活。——我</p></blockquote><p>其实就和我的博客域名一样mlosun.com（来源于MyLifeOrganized软件），创造有组织的生活。</p><h1 id="涉及到的工具及方法论"><a href="#涉及到的工具及方法论" class="headerlink" title="涉及到的工具及方法论"></a>涉及到的工具及方法论</h1><p>写这个系列的文章目的有二：</p><ol><li>记录下自己的工作环境，并不断优化提升</li><li>分享给更多的人，认识更多志同道合的朋友</li></ol><p>是不是特高大上的目的啊 :) 当然，我们涉及到的工具和方法论也都是及其高大上的，我遵循的原则是：</p><ul><li>尽可能的使用大厂商的产品</li><li>尽可能的使用开源或正版的产品</li><li>尽可能的使用经过大多数人验证过的方法论</li><li>尽可能清楚的描述每个过程、步骤及其原理</li></ul>]]></content>
      
      
      <categories>
          
          <category> 瞎折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作环境 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
